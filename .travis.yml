language: cpp

matrix:
  fast_finish: true
  include:
    - os: linux
      dist: trusty
      sudo: false
      compiler: gcc
      env:
      - BUILD_TARGET=gcc_build
      addons:
        apt:
          packages:
            - doxygen
            - libtinyxml2-dev
    - os: linux
      dist: trusty
      sudo: false
      compiler: gcc
      env:
        - BUILD_TARGET=gcc_build
        - CC=gcc-5
        - CXX=g++-5
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-5
            - g++-5
            - doxygen
            - libtinyxml2-dev
    - os: linux
      dist: trusty
      sudo: false
      compiler: gcc
      env:
        - BUILD_TARGET=coverage_build
        - CC=gcc-6
        - CXX=g++-6
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - g++-6
            - doxygen
            - libtinyxml2-dev
    - os: linux
      sudo: required
      services:
        - docker
      env: BUILD_TARGET=docker_build
    - os: osx
      osx_image: xcode8
      env:
        - BUILD_TARGET=osx_build

addons:
  apt:
    packages:
    - libcurl4-openssl-dev

before_install:
- if [[ "${BUILD_TARGET}" = "coverage_build" ]]; then
    pip install --user cpp-coveralls;
  fi

install:
- set -e
- if [[ "${BUILD_TARGET}" = "docker_build" ]]; then
    docker pull dronecore/dronecore;
  fi

script:
- if [[ "${BUILD_TARGET}" = "gcc_build" ]]; then
    make EXTERNAL_DIR=external_example;
    make default install;
    make docs;
    make run_unit_tests;
    (cd example/takeoff_land && mkdir build && cd build && cmake .. && make);
    (cd example/fly_mission && mkdir build && cd build && cmake .. && make);
    make clean;
    make BUILD_TYPE=Release;
    make default install;
    make run_unit_tests;
  fi
- if [[ "${BUILD_TARGET}" = "coverage_build" ]]; then
    make BUILD_TYPE=Coverage;
    make run_unit_tests;
  fi

- if [[ "${BUILD_TARGET}" = "docker_build" ]]; then
    docker run -it -v $TRAVIS_BUILD_DIR:/home/docker1000/src/DroneCore:rw dronecore/dronecore make;
    docker run -it -v $TRAVIS_BUILD_DIR:/home/docker1000/src/DroneCore:rw dronecore/dronecore make default install;
    docker run -it -v $TRAVIS_BUILD_DIR:/home/docker1000/src/DroneCore:rw dronecore/dronecore make run_unit_tests;
    docker run -it -v $TRAVIS_BUILD_DIR:/home/docker1000/src/DroneCore:rw dronecore/dronecore make fix_style;
    docker run -it -v $TRAVIS_BUILD_DIR:/home/docker1000/src/DroneCore:rw dronecore/dronecore make docs;
    docker run -it -v $TRAVIS_BUILD_DIR:/home/docker1000/src/DroneCore:rw dronecore/dronecore make clean;
    docker run -it -v $TRAVIS_BUILD_DIR:/home/docker1000/src/DroneCore:rw dronecore/dronecore make BUILD_TYPE=Release;
    docker run -it -v $TRAVIS_BUILD_DIR:/home/docker1000/src/DroneCore:rw dronecore/dronecore make default install;
    docker run -it -v $TRAVIS_BUILD_DIR:/home/docker1000/src/DroneCore:rw dronecore/dronecore make run_unit_tests;
  fi
- if [[ "${BUILD_TARGET}" = "osx_build" ]]; then
    make;
    make default install;
    make run_unit_tests;
    make clean;
    make BUILD_TYPE=Release;
    make default install;
    make run_unit_tests;
  fi

after_success:
- if [[ "${BUILD_TARGET}" = "coverage_build" ]]; then
  coveralls --root . --build-root build/default
    --exclude=libs --exclude="plugins" --exclude="/usr/include/" --exclude="curl-android-ios"
    --exclude="debug_helpers" --exclude="example" --exclude="external_example"
    --exclude-pattern=".*CMakeFiles.*" --exclude-pattern=".*_test.*";
  fi
