// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/mission_plan/mission_plan.proto)

#include <iomanip>

#include "mission_plan_impl.h"
#include "plugins/mission_plan/mission_plan.h"

namespace mavsdk {

using MissionProgress = MissionPlan::MissionProgress;

MissionPlan::MissionPlan(System& system) : PluginBase(), _impl{new MissionPlanImpl(system)} {}

MissionPlan::MissionPlan(std::shared_ptr<System> system) :
    PluginBase(),
    _impl{new MissionPlanImpl(system)}
{}

MissionPlan::~MissionPlan() {}

void MissionPlan::upload_mission_plan_async(std::string json_plan, const ResultCallback callback)
{
    _impl->upload_mission_plan_async(json_plan, callback);
}

MissionPlan::Result MissionPlan::upload_mission_plan(std::string json_plan) const
{
    return _impl->upload_mission_plan(json_plan);
}

MissionPlan::Result MissionPlan::cancel_mission_plan_upload() const
{
    return _impl->cancel_mission_plan_upload();
}

void MissionPlan::clear_mission_plan_async(const ResultCallback callback)
{
    _impl->clear_mission_plan_async(callback);
}

MissionPlan::Result MissionPlan::clear_mission_plan() const
{
    return _impl->clear_mission_plan();
}

void MissionPlan::start_mission_async(const ResultCallback callback)
{
    _impl->start_mission_async(callback);
}

MissionPlan::Result MissionPlan::start_mission() const
{
    return _impl->start_mission();
}

void MissionPlan::pause_mission_async(const ResultCallback callback)
{
    _impl->pause_mission_async(callback);
}

MissionPlan::Result MissionPlan::pause_mission() const
{
    return _impl->pause_mission();
}

void MissionPlan::set_current_mission_item_async(int32_t index, const ResultCallback callback)
{
    _impl->set_current_mission_item_async(index, callback);
}

MissionPlan::Result MissionPlan::set_current_mission_item(int32_t index) const
{
    return _impl->set_current_mission_item(index);
}

std::pair<MissionPlan::Result, bool> MissionPlan::is_mission_finished() const
{
    return _impl->is_mission_finished();
}

void MissionPlan::subscribe_mission_progress(MissionProgressCallback callback)
{
    _impl->subscribe_mission_progress(callback);
}

MissionPlan::MissionProgress MissionPlan::mission_progress() const
{
    return _impl->mission_progress();
}

bool operator==(const MissionPlan::MissionProgress& lhs, const MissionPlan::MissionProgress& rhs)
{
    return (rhs.current == lhs.current) && (rhs.total == lhs.total);
}

std::ostream& operator<<(std::ostream& str, MissionPlan::MissionProgress const& mission_progress)
{
    str << std::setprecision(15);
    str << "mission_progress:" << '\n' << "{\n";
    str << "    current: " << mission_progress.current << '\n';
    str << "    total: " << mission_progress.total << '\n';
    str << '}';
    return str;
}

std::ostream& operator<<(std::ostream& str, MissionPlan::Result const& result)
{
    switch (result) {
        case MissionPlan::Result::Unknown:
            return str << "Unknown";
        case MissionPlan::Result::Success:
            return str << "Success";
        case MissionPlan::Result::Error:
            return str << "Error";
        case MissionPlan::Result::TooManyMissionItems:
            return str << "Too Many Mission Items";
        case MissionPlan::Result::Busy:
            return str << "Busy";
        case MissionPlan::Result::Timeout:
            return str << "Timeout";
        case MissionPlan::Result::InvalidArgument:
            return str << "Invalid Argument";
        case MissionPlan::Result::FailedToParsePlan:
            return str << "Failed To Parse Plan";
        case MissionPlan::Result::UnsupportedMissionCmd:
            return str << "Unsupported Mission Cmd";
        case MissionPlan::Result::TransferCancelled:
            return str << "Transfer Cancelled";
        default:
            return str << "Unknown";
    }
}

} // namespace mavsdk