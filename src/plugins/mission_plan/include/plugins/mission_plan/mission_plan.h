// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/mission_plan/mission_plan.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "plugin_base.h"

namespace mavsdk {

class System;
class MissionPlanImpl;

/**
 * @brief Enable mission from QGC .plan files.
 */
class MissionPlan : public PluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto mission_plan = MissionPlan(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit MissionPlan(System& system); // deprecated

    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto mission_plan = MissionPlan(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit MissionPlan(std::shared_ptr<System> system); // new

    /**
     * @brief Destructor (internal use only).
     */
    ~MissionPlan();

    /**
     * @brief Mission progress type.
     */
    struct MissionProgress {
        int32_t current{}; /**< @brief Current mission item index (0-based) */
        int32_t total{}; /**< @brief Total number of mission items */
    };

    /**
     * @brief Equal operator to compare two `MissionPlan::MissionProgress` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool
    operator==(const MissionPlan::MissionProgress& lhs, const MissionPlan::MissionProgress& rhs);

    /**
     * @brief Stream operator to print information about a `MissionPlan::MissionProgress`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream&
    operator<<(std::ostream& str, MissionPlan::MissionProgress const& mission_progress);

    /**
     * @brief Possible results returned for action requests.
     */
    enum class Result {
        Unknown, /**< @brief Unknown result. */
        Success, /**< @brief Request succeeded. */
        Error, /**< @brief Error. */
        TooManyMissionItems, /**< @brief Too many mission items in the mission. */
        Busy, /**< @brief Vehicle is busy. */
        Timeout, /**< @brief Request timed out. */
        InvalidArgument, /**< @brief Invalid argument. */
        FailedToParsePlan, /**< @brief Failed to parse the QGroundControl plan. */
        UnsupportedMissionCmd, /**< @brief Unsupported mission command. */
        TransferCancelled, /**< @brief Mission transfer (upload or download) has been cancelled. */
    };

    /**
     * @brief Stream operator to print information about a `MissionPlan::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, MissionPlan::Result const& result);

    /**
     * @brief Callback type for asynchronous MissionPlan calls.
     */
    using ResultCallback = std::function<void(Result)>;

    /**
     * @brief Upload a JSON .plan mission.
     *
     * The mission items are uploaded to a drone. Once uploaded the mission can be started and
     * executed even if the connection is lost.
     *
     * This function is non-blocking. See 'upload_mission_plan' for the blocking counterpart.
     */
    void upload_mission_plan_async(std::string json_plan, const ResultCallback callback);

    /**
     * @brief Upload a JSON .plan mission.
     *
     * The mission items are uploaded to a drone. Once uploaded the mission can be started and
     * executed even if the connection is lost.
     *
     * This function is blocking. See 'upload_mission_plan_async' for the non-blocking counterpart.
     *
     * @return Result of request.
     */
    Result upload_mission_plan(std::string json_plan) const;

    /**
     * @brief Cancel an ongoing mission plan upload.
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result cancel_mission_plan_upload() const;

    /**
     * @brief Clear the mission plan (including geofence and rally points) saved on the vehicle.
     *
     * This function is non-blocking. See 'clear_mission_plan' for the blocking counterpart.
     */
    void clear_mission_plan_async(const ResultCallback callback);

    /**
     * @brief Clear the mission plan (including geofence and rally points) saved on the vehicle.
     *
     * This function is blocking. See 'clear_mission_plan_async' for the non-blocking counterpart.
     *
     * @return Result of request.
     */
    Result clear_mission_plan() const;

    /**
     * @brief Start the mission.
     *
     * A mission must be uploaded to the vehicle before this can be called.
     *
     * This function is non-blocking. See 'start_mission' for the blocking counterpart.
     */
    void start_mission_async(const ResultCallback callback);

    /**
     * @brief Start the mission.
     *
     * A mission must be uploaded to the vehicle before this can be called.
     *
     * This function is blocking. See 'start_mission_async' for the non-blocking counterpart.
     *
     * @return Result of request.
     */
    Result start_mission() const;

    /**
     * @brief Pause the mission.
     *
     * Pausing the mission puts the vehicle into
     * [HOLD mode](https://docs.px4.io/en/flight_modes/hold.html).
     * A multicopter should just hover at the spot while a fixedwing vehicle should loiter
     * around the location where it paused.
     *
     * This function is non-blocking. See 'pause_mission' for the blocking counterpart.
     */
    void pause_mission_async(const ResultCallback callback);

    /**
     * @brief Pause the mission.
     *
     * Pausing the mission puts the vehicle into
     * [HOLD mode](https://docs.px4.io/en/flight_modes/hold.html).
     * A multicopter should just hover at the spot while a fixedwing vehicle should loiter
     * around the location where it paused.
     *
     * This function is blocking. See 'pause_mission_async' for the non-blocking counterpart.
     *
     * @return Result of request.
     */
    Result pause_mission() const;

    /**
     * @brief Sets the mission plan item index to go to.
     *
     * By setting the current index to 0, the mission is restarted from the beginning.
     *
     * Note that this is not necessarily true for general missions using MAVLink if loop counters
     * are used.
     *
     * This function is non-blocking. See 'set_current_mission_item' for the blocking counterpart.
     */
    void set_current_mission_item_async(int32_t index, const ResultCallback callback);

    /**
     * @brief Sets the mission plan item index to go to.
     *
     * By setting the current index to 0, the mission is restarted from the beginning.
     *
     * Note that this is not necessarily true for general missions using MAVLink if loop counters
     * are used.
     *
     * This function is blocking. See 'set_current_mission_item_async' for the non-blocking
     * counterpart.
     *
     * @return Result of request.
     */
    Result set_current_mission_item(int32_t index) const;

    /**
     * @brief Check if the mission has been finished.
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    std::pair<Result, bool> is_mission_finished() const;

    /**
     * @brief Callback type for subscribe_mission_progress.
     */

    using MissionProgressCallback = std::function<void(MissionProgress)>;

    /**
     * @brief Subscribe to mission progress updates.
     */
    void subscribe_mission_progress(MissionProgressCallback callback);

    /**
     * @brief Poll for 'MissionProgress' (blocking).
     *
     * @return One MissionProgress update.
     */
    MissionProgress mission_progress() const;

    /**
     * @brief Copy constructor.
     */
    MissionPlan(const MissionPlan& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const MissionPlan& operator=(const MissionPlan&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<MissionPlanImpl> _impl;
};

} // namespace mavsdk