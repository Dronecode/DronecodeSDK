// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mission_plan/mission_plan.proto

#include "mission_plan/mission_plan.pb.h"
#include "mission_plan/mission_plan.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace mission_plan {

static const char* MissionPlanService_method_names[] = {
  "/mavsdk.rpc.mission_plan.MissionPlanService/UploadMissionPlan",
  "/mavsdk.rpc.mission_plan.MissionPlanService/CancelMissionPlanUpload",
  "/mavsdk.rpc.mission_plan.MissionPlanService/ClearMissionPlan",
  "/mavsdk.rpc.mission_plan.MissionPlanService/StartMission",
  "/mavsdk.rpc.mission_plan.MissionPlanService/PauseMission",
  "/mavsdk.rpc.mission_plan.MissionPlanService/SetCurrentMissionItem",
  "/mavsdk.rpc.mission_plan.MissionPlanService/IsMissionFinished",
  "/mavsdk.rpc.mission_plan.MissionPlanService/SubscribeMissionProgress",
};

std::unique_ptr< MissionPlanService::Stub> MissionPlanService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MissionPlanService::Stub> stub(new MissionPlanService::Stub(channel));
  return stub;
}

MissionPlanService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_UploadMissionPlan_(MissionPlanService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelMissionPlanUpload_(MissionPlanService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearMissionPlan_(MissionPlanService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartMission_(MissionPlanService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PauseMission_(MissionPlanService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCurrentMissionItem_(MissionPlanService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsMissionFinished_(MissionPlanService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeMissionProgress_(MissionPlanService_method_names[7], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status MissionPlanService::Stub::UploadMissionPlan(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::UploadMissionPlanRequest& request, ::mavsdk::rpc::mission_plan::UploadMissionPlanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_plan::UploadMissionPlanRequest, ::mavsdk::rpc::mission_plan::UploadMissionPlanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadMissionPlan_, context, request, response);
}

void MissionPlanService::Stub::experimental_async::UploadMissionPlan(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::UploadMissionPlanRequest* request, ::mavsdk::rpc::mission_plan::UploadMissionPlanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_plan::UploadMissionPlanRequest, ::mavsdk::rpc::mission_plan::UploadMissionPlanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadMissionPlan_, context, request, response, std::move(f));
}

void MissionPlanService::Stub::experimental_async::UploadMissionPlan(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::UploadMissionPlanRequest* request, ::mavsdk::rpc::mission_plan::UploadMissionPlanResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadMissionPlan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_plan::UploadMissionPlanResponse>* MissionPlanService::Stub::PrepareAsyncUploadMissionPlanRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::UploadMissionPlanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_plan::UploadMissionPlanResponse, ::mavsdk::rpc::mission_plan::UploadMissionPlanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadMissionPlan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_plan::UploadMissionPlanResponse>* MissionPlanService::Stub::AsyncUploadMissionPlanRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::UploadMissionPlanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadMissionPlanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionPlanService::Stub::CancelMissionPlanUpload(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadRequest& request, ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadRequest, ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelMissionPlanUpload_, context, request, response);
}

void MissionPlanService::Stub::experimental_async::CancelMissionPlanUpload(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadRequest* request, ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadRequest, ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelMissionPlanUpload_, context, request, response, std::move(f));
}

void MissionPlanService::Stub::experimental_async::CancelMissionPlanUpload(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadRequest* request, ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelMissionPlanUpload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadResponse>* MissionPlanService::Stub::PrepareAsyncCancelMissionPlanUploadRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadResponse, ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelMissionPlanUpload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadResponse>* MissionPlanService::Stub::AsyncCancelMissionPlanUploadRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelMissionPlanUploadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionPlanService::Stub::ClearMissionPlan(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::ClearMissionPlanRequest& request, ::mavsdk::rpc::mission_plan::ClearMissionPlanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_plan::ClearMissionPlanRequest, ::mavsdk::rpc::mission_plan::ClearMissionPlanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearMissionPlan_, context, request, response);
}

void MissionPlanService::Stub::experimental_async::ClearMissionPlan(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::ClearMissionPlanRequest* request, ::mavsdk::rpc::mission_plan::ClearMissionPlanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_plan::ClearMissionPlanRequest, ::mavsdk::rpc::mission_plan::ClearMissionPlanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearMissionPlan_, context, request, response, std::move(f));
}

void MissionPlanService::Stub::experimental_async::ClearMissionPlan(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::ClearMissionPlanRequest* request, ::mavsdk::rpc::mission_plan::ClearMissionPlanResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearMissionPlan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_plan::ClearMissionPlanResponse>* MissionPlanService::Stub::PrepareAsyncClearMissionPlanRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::ClearMissionPlanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_plan::ClearMissionPlanResponse, ::mavsdk::rpc::mission_plan::ClearMissionPlanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearMissionPlan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_plan::ClearMissionPlanResponse>* MissionPlanService::Stub::AsyncClearMissionPlanRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::ClearMissionPlanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearMissionPlanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionPlanService::Stub::StartMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::StartMissionRequest& request, ::mavsdk::rpc::mission_plan::StartMissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_plan::StartMissionRequest, ::mavsdk::rpc::mission_plan::StartMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartMission_, context, request, response);
}

void MissionPlanService::Stub::experimental_async::StartMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::StartMissionRequest* request, ::mavsdk::rpc::mission_plan::StartMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_plan::StartMissionRequest, ::mavsdk::rpc::mission_plan::StartMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartMission_, context, request, response, std::move(f));
}

void MissionPlanService::Stub::experimental_async::StartMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::StartMissionRequest* request, ::mavsdk::rpc::mission_plan::StartMissionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartMission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_plan::StartMissionResponse>* MissionPlanService::Stub::PrepareAsyncStartMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::StartMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_plan::StartMissionResponse, ::mavsdk::rpc::mission_plan::StartMissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartMission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_plan::StartMissionResponse>* MissionPlanService::Stub::AsyncStartMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::StartMissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartMissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionPlanService::Stub::PauseMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::PauseMissionRequest& request, ::mavsdk::rpc::mission_plan::PauseMissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_plan::PauseMissionRequest, ::mavsdk::rpc::mission_plan::PauseMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PauseMission_, context, request, response);
}

void MissionPlanService::Stub::experimental_async::PauseMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::PauseMissionRequest* request, ::mavsdk::rpc::mission_plan::PauseMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_plan::PauseMissionRequest, ::mavsdk::rpc::mission_plan::PauseMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PauseMission_, context, request, response, std::move(f));
}

void MissionPlanService::Stub::experimental_async::PauseMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::PauseMissionRequest* request, ::mavsdk::rpc::mission_plan::PauseMissionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PauseMission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_plan::PauseMissionResponse>* MissionPlanService::Stub::PrepareAsyncPauseMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::PauseMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_plan::PauseMissionResponse, ::mavsdk::rpc::mission_plan::PauseMissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PauseMission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_plan::PauseMissionResponse>* MissionPlanService::Stub::AsyncPauseMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::PauseMissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPauseMissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionPlanService::Stub::SetCurrentMissionItem(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::SetCurrentMissionItemRequest& request, ::mavsdk::rpc::mission_plan::SetCurrentMissionItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_plan::SetCurrentMissionItemRequest, ::mavsdk::rpc::mission_plan::SetCurrentMissionItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCurrentMissionItem_, context, request, response);
}

void MissionPlanService::Stub::experimental_async::SetCurrentMissionItem(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::SetCurrentMissionItemRequest* request, ::mavsdk::rpc::mission_plan::SetCurrentMissionItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_plan::SetCurrentMissionItemRequest, ::mavsdk::rpc::mission_plan::SetCurrentMissionItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCurrentMissionItem_, context, request, response, std::move(f));
}

void MissionPlanService::Stub::experimental_async::SetCurrentMissionItem(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::SetCurrentMissionItemRequest* request, ::mavsdk::rpc::mission_plan::SetCurrentMissionItemResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCurrentMissionItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_plan::SetCurrentMissionItemResponse>* MissionPlanService::Stub::PrepareAsyncSetCurrentMissionItemRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::SetCurrentMissionItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_plan::SetCurrentMissionItemResponse, ::mavsdk::rpc::mission_plan::SetCurrentMissionItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCurrentMissionItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_plan::SetCurrentMissionItemResponse>* MissionPlanService::Stub::AsyncSetCurrentMissionItemRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::SetCurrentMissionItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCurrentMissionItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionPlanService::Stub::IsMissionFinished(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::IsMissionFinishedRequest& request, ::mavsdk::rpc::mission_plan::IsMissionFinishedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_plan::IsMissionFinishedRequest, ::mavsdk::rpc::mission_plan::IsMissionFinishedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsMissionFinished_, context, request, response);
}

void MissionPlanService::Stub::experimental_async::IsMissionFinished(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::IsMissionFinishedRequest* request, ::mavsdk::rpc::mission_plan::IsMissionFinishedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_plan::IsMissionFinishedRequest, ::mavsdk::rpc::mission_plan::IsMissionFinishedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsMissionFinished_, context, request, response, std::move(f));
}

void MissionPlanService::Stub::experimental_async::IsMissionFinished(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::IsMissionFinishedRequest* request, ::mavsdk::rpc::mission_plan::IsMissionFinishedResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsMissionFinished_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_plan::IsMissionFinishedResponse>* MissionPlanService::Stub::PrepareAsyncIsMissionFinishedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::IsMissionFinishedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_plan::IsMissionFinishedResponse, ::mavsdk::rpc::mission_plan::IsMissionFinishedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsMissionFinished_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_plan::IsMissionFinishedResponse>* MissionPlanService::Stub::AsyncIsMissionFinishedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::IsMissionFinishedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsMissionFinishedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::mavsdk::rpc::mission_plan::MissionProgressResponse>* MissionPlanService::Stub::SubscribeMissionProgressRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::SubscribeMissionProgressRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::mission_plan::MissionProgressResponse>::Create(channel_.get(), rpcmethod_SubscribeMissionProgress_, context, request);
}

void MissionPlanService::Stub::experimental_async::SubscribeMissionProgress(::grpc::ClientContext* context, ::mavsdk::rpc::mission_plan::SubscribeMissionProgressRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::mission_plan::MissionProgressResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::mission_plan::MissionProgressResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeMissionProgress_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::mission_plan::MissionProgressResponse>* MissionPlanService::Stub::AsyncSubscribeMissionProgressRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::SubscribeMissionProgressRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::mission_plan::MissionProgressResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMissionProgress_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::mission_plan::MissionProgressResponse>* MissionPlanService::Stub::PrepareAsyncSubscribeMissionProgressRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_plan::SubscribeMissionProgressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::mission_plan::MissionProgressResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMissionProgress_, context, request, false, nullptr);
}

MissionPlanService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionPlanService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionPlanService::Service, ::mavsdk::rpc::mission_plan::UploadMissionPlanRequest, ::mavsdk::rpc::mission_plan::UploadMissionPlanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionPlanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_plan::UploadMissionPlanRequest* req,
             ::mavsdk::rpc::mission_plan::UploadMissionPlanResponse* resp) {
               return service->UploadMissionPlan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionPlanService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionPlanService::Service, ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadRequest, ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionPlanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadRequest* req,
             ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadResponse* resp) {
               return service->CancelMissionPlanUpload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionPlanService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionPlanService::Service, ::mavsdk::rpc::mission_plan::ClearMissionPlanRequest, ::mavsdk::rpc::mission_plan::ClearMissionPlanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionPlanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_plan::ClearMissionPlanRequest* req,
             ::mavsdk::rpc::mission_plan::ClearMissionPlanResponse* resp) {
               return service->ClearMissionPlan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionPlanService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionPlanService::Service, ::mavsdk::rpc::mission_plan::StartMissionRequest, ::mavsdk::rpc::mission_plan::StartMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionPlanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_plan::StartMissionRequest* req,
             ::mavsdk::rpc::mission_plan::StartMissionResponse* resp) {
               return service->StartMission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionPlanService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionPlanService::Service, ::mavsdk::rpc::mission_plan::PauseMissionRequest, ::mavsdk::rpc::mission_plan::PauseMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionPlanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_plan::PauseMissionRequest* req,
             ::mavsdk::rpc::mission_plan::PauseMissionResponse* resp) {
               return service->PauseMission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionPlanService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionPlanService::Service, ::mavsdk::rpc::mission_plan::SetCurrentMissionItemRequest, ::mavsdk::rpc::mission_plan::SetCurrentMissionItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionPlanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_plan::SetCurrentMissionItemRequest* req,
             ::mavsdk::rpc::mission_plan::SetCurrentMissionItemResponse* resp) {
               return service->SetCurrentMissionItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionPlanService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionPlanService::Service, ::mavsdk::rpc::mission_plan::IsMissionFinishedRequest, ::mavsdk::rpc::mission_plan::IsMissionFinishedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionPlanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_plan::IsMissionFinishedRequest* req,
             ::mavsdk::rpc::mission_plan::IsMissionFinishedResponse* resp) {
               return service->IsMissionFinished(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionPlanService_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MissionPlanService::Service, ::mavsdk::rpc::mission_plan::SubscribeMissionProgressRequest, ::mavsdk::rpc::mission_plan::MissionProgressResponse>(
          [](MissionPlanService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_plan::SubscribeMissionProgressRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::mission_plan::MissionProgressResponse>* writer) {
               return service->SubscribeMissionProgress(ctx, req, writer);
             }, this)));
}

MissionPlanService::Service::~Service() {
}

::grpc::Status MissionPlanService::Service::UploadMissionPlan(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_plan::UploadMissionPlanRequest* request, ::mavsdk::rpc::mission_plan::UploadMissionPlanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionPlanService::Service::CancelMissionPlanUpload(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadRequest* request, ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionPlanService::Service::ClearMissionPlan(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_plan::ClearMissionPlanRequest* request, ::mavsdk::rpc::mission_plan::ClearMissionPlanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionPlanService::Service::StartMission(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_plan::StartMissionRequest* request, ::mavsdk::rpc::mission_plan::StartMissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionPlanService::Service::PauseMission(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_plan::PauseMissionRequest* request, ::mavsdk::rpc::mission_plan::PauseMissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionPlanService::Service::SetCurrentMissionItem(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_plan::SetCurrentMissionItemRequest* request, ::mavsdk::rpc::mission_plan::SetCurrentMissionItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionPlanService::Service::IsMissionFinished(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_plan::IsMissionFinishedRequest* request, ::mavsdk::rpc::mission_plan::IsMissionFinishedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionPlanService::Service::SubscribeMissionProgress(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_plan::SubscribeMissionProgressRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::mission_plan::MissionProgressResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace mission_plan

