// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mission_plan/mission_plan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mission_5fplan_2fmission_5fplan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mission_5fplan_2fmission_5fplan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mission_5fplan_2fmission_5fplan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mission_5fplan_2fmission_5fplan_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mission_5fplan_2fmission_5fplan_2eproto;
namespace mavsdk {
namespace rpc {
namespace mission_plan {
class CancelMissionPlanUploadRequest;
class CancelMissionPlanUploadRequestDefaultTypeInternal;
extern CancelMissionPlanUploadRequestDefaultTypeInternal _CancelMissionPlanUploadRequest_default_instance_;
class CancelMissionPlanUploadResponse;
class CancelMissionPlanUploadResponseDefaultTypeInternal;
extern CancelMissionPlanUploadResponseDefaultTypeInternal _CancelMissionPlanUploadResponse_default_instance_;
class ClearMissionPlanRequest;
class ClearMissionPlanRequestDefaultTypeInternal;
extern ClearMissionPlanRequestDefaultTypeInternal _ClearMissionPlanRequest_default_instance_;
class ClearMissionPlanResponse;
class ClearMissionPlanResponseDefaultTypeInternal;
extern ClearMissionPlanResponseDefaultTypeInternal _ClearMissionPlanResponse_default_instance_;
class IsMissionFinishedRequest;
class IsMissionFinishedRequestDefaultTypeInternal;
extern IsMissionFinishedRequestDefaultTypeInternal _IsMissionFinishedRequest_default_instance_;
class IsMissionFinishedResponse;
class IsMissionFinishedResponseDefaultTypeInternal;
extern IsMissionFinishedResponseDefaultTypeInternal _IsMissionFinishedResponse_default_instance_;
class MissionPlanResult;
class MissionPlanResultDefaultTypeInternal;
extern MissionPlanResultDefaultTypeInternal _MissionPlanResult_default_instance_;
class MissionProgress;
class MissionProgressDefaultTypeInternal;
extern MissionProgressDefaultTypeInternal _MissionProgress_default_instance_;
class MissionProgressResponse;
class MissionProgressResponseDefaultTypeInternal;
extern MissionProgressResponseDefaultTypeInternal _MissionProgressResponse_default_instance_;
class PauseMissionRequest;
class PauseMissionRequestDefaultTypeInternal;
extern PauseMissionRequestDefaultTypeInternal _PauseMissionRequest_default_instance_;
class PauseMissionResponse;
class PauseMissionResponseDefaultTypeInternal;
extern PauseMissionResponseDefaultTypeInternal _PauseMissionResponse_default_instance_;
class SetCurrentMissionItemRequest;
class SetCurrentMissionItemRequestDefaultTypeInternal;
extern SetCurrentMissionItemRequestDefaultTypeInternal _SetCurrentMissionItemRequest_default_instance_;
class SetCurrentMissionItemResponse;
class SetCurrentMissionItemResponseDefaultTypeInternal;
extern SetCurrentMissionItemResponseDefaultTypeInternal _SetCurrentMissionItemResponse_default_instance_;
class StartMissionRequest;
class StartMissionRequestDefaultTypeInternal;
extern StartMissionRequestDefaultTypeInternal _StartMissionRequest_default_instance_;
class StartMissionResponse;
class StartMissionResponseDefaultTypeInternal;
extern StartMissionResponseDefaultTypeInternal _StartMissionResponse_default_instance_;
class SubscribeMissionProgressRequest;
class SubscribeMissionProgressRequestDefaultTypeInternal;
extern SubscribeMissionProgressRequestDefaultTypeInternal _SubscribeMissionProgressRequest_default_instance_;
class UploadMissionPlanRequest;
class UploadMissionPlanRequestDefaultTypeInternal;
extern UploadMissionPlanRequestDefaultTypeInternal _UploadMissionPlanRequest_default_instance_;
class UploadMissionPlanResponse;
class UploadMissionPlanResponseDefaultTypeInternal;
extern UploadMissionPlanResponseDefaultTypeInternal _UploadMissionPlanResponse_default_instance_;
}  // namespace mission_plan
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::CancelMissionPlanUploadRequest>(Arena*);
template<> ::mavsdk::rpc::mission_plan::CancelMissionPlanUploadResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::CancelMissionPlanUploadResponse>(Arena*);
template<> ::mavsdk::rpc::mission_plan::ClearMissionPlanRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::ClearMissionPlanRequest>(Arena*);
template<> ::mavsdk::rpc::mission_plan::ClearMissionPlanResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::ClearMissionPlanResponse>(Arena*);
template<> ::mavsdk::rpc::mission_plan::IsMissionFinishedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::IsMissionFinishedRequest>(Arena*);
template<> ::mavsdk::rpc::mission_plan::IsMissionFinishedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::IsMissionFinishedResponse>(Arena*);
template<> ::mavsdk::rpc::mission_plan::MissionPlanResult* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::MissionPlanResult>(Arena*);
template<> ::mavsdk::rpc::mission_plan::MissionProgress* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::MissionProgress>(Arena*);
template<> ::mavsdk::rpc::mission_plan::MissionProgressResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::MissionProgressResponse>(Arena*);
template<> ::mavsdk::rpc::mission_plan::PauseMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::PauseMissionRequest>(Arena*);
template<> ::mavsdk::rpc::mission_plan::PauseMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::PauseMissionResponse>(Arena*);
template<> ::mavsdk::rpc::mission_plan::SetCurrentMissionItemRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::SetCurrentMissionItemRequest>(Arena*);
template<> ::mavsdk::rpc::mission_plan::SetCurrentMissionItemResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::SetCurrentMissionItemResponse>(Arena*);
template<> ::mavsdk::rpc::mission_plan::StartMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::StartMissionRequest>(Arena*);
template<> ::mavsdk::rpc::mission_plan::StartMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::StartMissionResponse>(Arena*);
template<> ::mavsdk::rpc::mission_plan::SubscribeMissionProgressRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::SubscribeMissionProgressRequest>(Arena*);
template<> ::mavsdk::rpc::mission_plan::UploadMissionPlanRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::UploadMissionPlanRequest>(Arena*);
template<> ::mavsdk::rpc::mission_plan::UploadMissionPlanResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_plan::UploadMissionPlanResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace mission_plan {

enum MissionPlanResult_Result : int {
  MissionPlanResult_Result_RESULT_UNKNOWN = 0,
  MissionPlanResult_Result_RESULT_SUCCESS = 1,
  MissionPlanResult_Result_RESULT_ERROR = 2,
  MissionPlanResult_Result_RESULT_TOO_MANY_MISSION_ITEMS = 3,
  MissionPlanResult_Result_RESULT_BUSY = 4,
  MissionPlanResult_Result_RESULT_TIMEOUT = 5,
  MissionPlanResult_Result_RESULT_INVALID_ARGUMENT = 6,
  MissionPlanResult_Result_RESULT_FAILED_TO_PARSE_PLAN = 7,
  MissionPlanResult_Result_RESULT_UNSUPPORTED_MISSION_CMD = 8,
  MissionPlanResult_Result_RESULT_TRANSFER_CANCELLED = 9,
  MissionPlanResult_Result_MissionPlanResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MissionPlanResult_Result_MissionPlanResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MissionPlanResult_Result_IsValid(int value);
constexpr MissionPlanResult_Result MissionPlanResult_Result_Result_MIN = MissionPlanResult_Result_RESULT_UNKNOWN;
constexpr MissionPlanResult_Result MissionPlanResult_Result_Result_MAX = MissionPlanResult_Result_RESULT_TRANSFER_CANCELLED;
constexpr int MissionPlanResult_Result_Result_ARRAYSIZE = MissionPlanResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionPlanResult_Result_descriptor();
template<typename T>
inline const std::string& MissionPlanResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MissionPlanResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MissionPlanResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MissionPlanResult_Result_descriptor(), enum_t_value);
}
inline bool MissionPlanResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MissionPlanResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MissionPlanResult_Result>(
    MissionPlanResult_Result_descriptor(), name, value);
}
// ===================================================================

class UploadMissionPlanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.UploadMissionPlanRequest) */ {
 public:
  inline UploadMissionPlanRequest() : UploadMissionPlanRequest(nullptr) {}
  virtual ~UploadMissionPlanRequest();

  UploadMissionPlanRequest(const UploadMissionPlanRequest& from);
  UploadMissionPlanRequest(UploadMissionPlanRequest&& from) noexcept
    : UploadMissionPlanRequest() {
    *this = ::std::move(from);
  }

  inline UploadMissionPlanRequest& operator=(const UploadMissionPlanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadMissionPlanRequest& operator=(UploadMissionPlanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadMissionPlanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadMissionPlanRequest* internal_default_instance() {
    return reinterpret_cast<const UploadMissionPlanRequest*>(
               &_UploadMissionPlanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UploadMissionPlanRequest& a, UploadMissionPlanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadMissionPlanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadMissionPlanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadMissionPlanRequest* New() const final {
    return CreateMaybeMessage<UploadMissionPlanRequest>(nullptr);
  }

  UploadMissionPlanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadMissionPlanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadMissionPlanRequest& from);
  void MergeFrom(const UploadMissionPlanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadMissionPlanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.UploadMissionPlanRequest";
  }
  protected:
  explicit UploadMissionPlanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonPlanFieldNumber = 1,
  };
  // string json_plan = 1;
  void clear_json_plan();
  const std::string& json_plan() const;
  void set_json_plan(const std::string& value);
  void set_json_plan(std::string&& value);
  void set_json_plan(const char* value);
  void set_json_plan(const char* value, size_t size);
  std::string* mutable_json_plan();
  std::string* release_json_plan();
  void set_allocated_json_plan(std::string* json_plan);
  private:
  const std::string& _internal_json_plan() const;
  void _internal_set_json_plan(const std::string& value);
  std::string* _internal_mutable_json_plan();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.UploadMissionPlanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_plan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class UploadMissionPlanResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.UploadMissionPlanResponse) */ {
 public:
  inline UploadMissionPlanResponse() : UploadMissionPlanResponse(nullptr) {}
  virtual ~UploadMissionPlanResponse();

  UploadMissionPlanResponse(const UploadMissionPlanResponse& from);
  UploadMissionPlanResponse(UploadMissionPlanResponse&& from) noexcept
    : UploadMissionPlanResponse() {
    *this = ::std::move(from);
  }

  inline UploadMissionPlanResponse& operator=(const UploadMissionPlanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadMissionPlanResponse& operator=(UploadMissionPlanResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadMissionPlanResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadMissionPlanResponse* internal_default_instance() {
    return reinterpret_cast<const UploadMissionPlanResponse*>(
               &_UploadMissionPlanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UploadMissionPlanResponse& a, UploadMissionPlanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadMissionPlanResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadMissionPlanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadMissionPlanResponse* New() const final {
    return CreateMaybeMessage<UploadMissionPlanResponse>(nullptr);
  }

  UploadMissionPlanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadMissionPlanResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadMissionPlanResponse& from);
  void MergeFrom(const UploadMissionPlanResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadMissionPlanResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.UploadMissionPlanResponse";
  }
  protected:
  explicit UploadMissionPlanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionPlanResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission_plan.MissionPlanResult mission_plan_result = 1;
  bool has_mission_plan_result() const;
  private:
  bool _internal_has_mission_plan_result() const;
  public:
  void clear_mission_plan_result();
  const ::mavsdk::rpc::mission_plan::MissionPlanResult& mission_plan_result() const;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* release_mission_plan_result();
  ::mavsdk::rpc::mission_plan::MissionPlanResult* mutable_mission_plan_result();
  void set_allocated_mission_plan_result(::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result);
  private:
  const ::mavsdk::rpc::mission_plan::MissionPlanResult& _internal_mission_plan_result() const;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* _internal_mutable_mission_plan_result();
  public:
  void unsafe_arena_set_allocated_mission_plan_result(
      ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result);
  ::mavsdk::rpc::mission_plan::MissionPlanResult* unsafe_arena_release_mission_plan_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.UploadMissionPlanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class CancelMissionPlanUploadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.CancelMissionPlanUploadRequest) */ {
 public:
  inline CancelMissionPlanUploadRequest() : CancelMissionPlanUploadRequest(nullptr) {}
  virtual ~CancelMissionPlanUploadRequest();

  CancelMissionPlanUploadRequest(const CancelMissionPlanUploadRequest& from);
  CancelMissionPlanUploadRequest(CancelMissionPlanUploadRequest&& from) noexcept
    : CancelMissionPlanUploadRequest() {
    *this = ::std::move(from);
  }

  inline CancelMissionPlanUploadRequest& operator=(const CancelMissionPlanUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelMissionPlanUploadRequest& operator=(CancelMissionPlanUploadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelMissionPlanUploadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelMissionPlanUploadRequest* internal_default_instance() {
    return reinterpret_cast<const CancelMissionPlanUploadRequest*>(
               &_CancelMissionPlanUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CancelMissionPlanUploadRequest& a, CancelMissionPlanUploadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelMissionPlanUploadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelMissionPlanUploadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelMissionPlanUploadRequest* New() const final {
    return CreateMaybeMessage<CancelMissionPlanUploadRequest>(nullptr);
  }

  CancelMissionPlanUploadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelMissionPlanUploadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelMissionPlanUploadRequest& from);
  void MergeFrom(const CancelMissionPlanUploadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelMissionPlanUploadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.CancelMissionPlanUploadRequest";
  }
  protected:
  explicit CancelMissionPlanUploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.CancelMissionPlanUploadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class CancelMissionPlanUploadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.CancelMissionPlanUploadResponse) */ {
 public:
  inline CancelMissionPlanUploadResponse() : CancelMissionPlanUploadResponse(nullptr) {}
  virtual ~CancelMissionPlanUploadResponse();

  CancelMissionPlanUploadResponse(const CancelMissionPlanUploadResponse& from);
  CancelMissionPlanUploadResponse(CancelMissionPlanUploadResponse&& from) noexcept
    : CancelMissionPlanUploadResponse() {
    *this = ::std::move(from);
  }

  inline CancelMissionPlanUploadResponse& operator=(const CancelMissionPlanUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelMissionPlanUploadResponse& operator=(CancelMissionPlanUploadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelMissionPlanUploadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelMissionPlanUploadResponse* internal_default_instance() {
    return reinterpret_cast<const CancelMissionPlanUploadResponse*>(
               &_CancelMissionPlanUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CancelMissionPlanUploadResponse& a, CancelMissionPlanUploadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelMissionPlanUploadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelMissionPlanUploadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelMissionPlanUploadResponse* New() const final {
    return CreateMaybeMessage<CancelMissionPlanUploadResponse>(nullptr);
  }

  CancelMissionPlanUploadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelMissionPlanUploadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelMissionPlanUploadResponse& from);
  void MergeFrom(const CancelMissionPlanUploadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelMissionPlanUploadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.CancelMissionPlanUploadResponse";
  }
  protected:
  explicit CancelMissionPlanUploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionPlanResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission_plan.MissionPlanResult mission_plan_result = 1;
  bool has_mission_plan_result() const;
  private:
  bool _internal_has_mission_plan_result() const;
  public:
  void clear_mission_plan_result();
  const ::mavsdk::rpc::mission_plan::MissionPlanResult& mission_plan_result() const;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* release_mission_plan_result();
  ::mavsdk::rpc::mission_plan::MissionPlanResult* mutable_mission_plan_result();
  void set_allocated_mission_plan_result(::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result);
  private:
  const ::mavsdk::rpc::mission_plan::MissionPlanResult& _internal_mission_plan_result() const;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* _internal_mutable_mission_plan_result();
  public:
  void unsafe_arena_set_allocated_mission_plan_result(
      ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result);
  ::mavsdk::rpc::mission_plan::MissionPlanResult* unsafe_arena_release_mission_plan_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.CancelMissionPlanUploadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class StartMissionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.StartMissionRequest) */ {
 public:
  inline StartMissionRequest() : StartMissionRequest(nullptr) {}
  virtual ~StartMissionRequest();

  StartMissionRequest(const StartMissionRequest& from);
  StartMissionRequest(StartMissionRequest&& from) noexcept
    : StartMissionRequest() {
    *this = ::std::move(from);
  }

  inline StartMissionRequest& operator=(const StartMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartMissionRequest& operator=(StartMissionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartMissionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartMissionRequest* internal_default_instance() {
    return reinterpret_cast<const StartMissionRequest*>(
               &_StartMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StartMissionRequest& a, StartMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartMissionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartMissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartMissionRequest* New() const final {
    return CreateMaybeMessage<StartMissionRequest>(nullptr);
  }

  StartMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartMissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartMissionRequest& from);
  void MergeFrom(const StartMissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartMissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.StartMissionRequest";
  }
  protected:
  explicit StartMissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.StartMissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class StartMissionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.StartMissionResponse) */ {
 public:
  inline StartMissionResponse() : StartMissionResponse(nullptr) {}
  virtual ~StartMissionResponse();

  StartMissionResponse(const StartMissionResponse& from);
  StartMissionResponse(StartMissionResponse&& from) noexcept
    : StartMissionResponse() {
    *this = ::std::move(from);
  }

  inline StartMissionResponse& operator=(const StartMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartMissionResponse& operator=(StartMissionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartMissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartMissionResponse* internal_default_instance() {
    return reinterpret_cast<const StartMissionResponse*>(
               &_StartMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StartMissionResponse& a, StartMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartMissionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartMissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartMissionResponse* New() const final {
    return CreateMaybeMessage<StartMissionResponse>(nullptr);
  }

  StartMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartMissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartMissionResponse& from);
  void MergeFrom(const StartMissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartMissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.StartMissionResponse";
  }
  protected:
  explicit StartMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionPlanResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission_plan.MissionPlanResult mission_plan_result = 1;
  bool has_mission_plan_result() const;
  private:
  bool _internal_has_mission_plan_result() const;
  public:
  void clear_mission_plan_result();
  const ::mavsdk::rpc::mission_plan::MissionPlanResult& mission_plan_result() const;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* release_mission_plan_result();
  ::mavsdk::rpc::mission_plan::MissionPlanResult* mutable_mission_plan_result();
  void set_allocated_mission_plan_result(::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result);
  private:
  const ::mavsdk::rpc::mission_plan::MissionPlanResult& _internal_mission_plan_result() const;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* _internal_mutable_mission_plan_result();
  public:
  void unsafe_arena_set_allocated_mission_plan_result(
      ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result);
  ::mavsdk::rpc::mission_plan::MissionPlanResult* unsafe_arena_release_mission_plan_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.StartMissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class PauseMissionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.PauseMissionRequest) */ {
 public:
  inline PauseMissionRequest() : PauseMissionRequest(nullptr) {}
  virtual ~PauseMissionRequest();

  PauseMissionRequest(const PauseMissionRequest& from);
  PauseMissionRequest(PauseMissionRequest&& from) noexcept
    : PauseMissionRequest() {
    *this = ::std::move(from);
  }

  inline PauseMissionRequest& operator=(const PauseMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseMissionRequest& operator=(PauseMissionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PauseMissionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PauseMissionRequest* internal_default_instance() {
    return reinterpret_cast<const PauseMissionRequest*>(
               &_PauseMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PauseMissionRequest& a, PauseMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseMissionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseMissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PauseMissionRequest* New() const final {
    return CreateMaybeMessage<PauseMissionRequest>(nullptr);
  }

  PauseMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PauseMissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PauseMissionRequest& from);
  void MergeFrom(const PauseMissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseMissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.PauseMissionRequest";
  }
  protected:
  explicit PauseMissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.PauseMissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class PauseMissionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.PauseMissionResponse) */ {
 public:
  inline PauseMissionResponse() : PauseMissionResponse(nullptr) {}
  virtual ~PauseMissionResponse();

  PauseMissionResponse(const PauseMissionResponse& from);
  PauseMissionResponse(PauseMissionResponse&& from) noexcept
    : PauseMissionResponse() {
    *this = ::std::move(from);
  }

  inline PauseMissionResponse& operator=(const PauseMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseMissionResponse& operator=(PauseMissionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PauseMissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PauseMissionResponse* internal_default_instance() {
    return reinterpret_cast<const PauseMissionResponse*>(
               &_PauseMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PauseMissionResponse& a, PauseMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseMissionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseMissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PauseMissionResponse* New() const final {
    return CreateMaybeMessage<PauseMissionResponse>(nullptr);
  }

  PauseMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PauseMissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PauseMissionResponse& from);
  void MergeFrom(const PauseMissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseMissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.PauseMissionResponse";
  }
  protected:
  explicit PauseMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionPlanResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission_plan.MissionPlanResult mission_plan_result = 1;
  bool has_mission_plan_result() const;
  private:
  bool _internal_has_mission_plan_result() const;
  public:
  void clear_mission_plan_result();
  const ::mavsdk::rpc::mission_plan::MissionPlanResult& mission_plan_result() const;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* release_mission_plan_result();
  ::mavsdk::rpc::mission_plan::MissionPlanResult* mutable_mission_plan_result();
  void set_allocated_mission_plan_result(::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result);
  private:
  const ::mavsdk::rpc::mission_plan::MissionPlanResult& _internal_mission_plan_result() const;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* _internal_mutable_mission_plan_result();
  public:
  void unsafe_arena_set_allocated_mission_plan_result(
      ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result);
  ::mavsdk::rpc::mission_plan::MissionPlanResult* unsafe_arena_release_mission_plan_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.PauseMissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class ClearMissionPlanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.ClearMissionPlanRequest) */ {
 public:
  inline ClearMissionPlanRequest() : ClearMissionPlanRequest(nullptr) {}
  virtual ~ClearMissionPlanRequest();

  ClearMissionPlanRequest(const ClearMissionPlanRequest& from);
  ClearMissionPlanRequest(ClearMissionPlanRequest&& from) noexcept
    : ClearMissionPlanRequest() {
    *this = ::std::move(from);
  }

  inline ClearMissionPlanRequest& operator=(const ClearMissionPlanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearMissionPlanRequest& operator=(ClearMissionPlanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearMissionPlanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearMissionPlanRequest* internal_default_instance() {
    return reinterpret_cast<const ClearMissionPlanRequest*>(
               &_ClearMissionPlanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ClearMissionPlanRequest& a, ClearMissionPlanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearMissionPlanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearMissionPlanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearMissionPlanRequest* New() const final {
    return CreateMaybeMessage<ClearMissionPlanRequest>(nullptr);
  }

  ClearMissionPlanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearMissionPlanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearMissionPlanRequest& from);
  void MergeFrom(const ClearMissionPlanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearMissionPlanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.ClearMissionPlanRequest";
  }
  protected:
  explicit ClearMissionPlanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.ClearMissionPlanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class ClearMissionPlanResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.ClearMissionPlanResponse) */ {
 public:
  inline ClearMissionPlanResponse() : ClearMissionPlanResponse(nullptr) {}
  virtual ~ClearMissionPlanResponse();

  ClearMissionPlanResponse(const ClearMissionPlanResponse& from);
  ClearMissionPlanResponse(ClearMissionPlanResponse&& from) noexcept
    : ClearMissionPlanResponse() {
    *this = ::std::move(from);
  }

  inline ClearMissionPlanResponse& operator=(const ClearMissionPlanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearMissionPlanResponse& operator=(ClearMissionPlanResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearMissionPlanResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearMissionPlanResponse* internal_default_instance() {
    return reinterpret_cast<const ClearMissionPlanResponse*>(
               &_ClearMissionPlanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ClearMissionPlanResponse& a, ClearMissionPlanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearMissionPlanResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearMissionPlanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearMissionPlanResponse* New() const final {
    return CreateMaybeMessage<ClearMissionPlanResponse>(nullptr);
  }

  ClearMissionPlanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearMissionPlanResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearMissionPlanResponse& from);
  void MergeFrom(const ClearMissionPlanResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearMissionPlanResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.ClearMissionPlanResponse";
  }
  protected:
  explicit ClearMissionPlanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionPlanResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission_plan.MissionPlanResult mission_plan_result = 1;
  bool has_mission_plan_result() const;
  private:
  bool _internal_has_mission_plan_result() const;
  public:
  void clear_mission_plan_result();
  const ::mavsdk::rpc::mission_plan::MissionPlanResult& mission_plan_result() const;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* release_mission_plan_result();
  ::mavsdk::rpc::mission_plan::MissionPlanResult* mutable_mission_plan_result();
  void set_allocated_mission_plan_result(::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result);
  private:
  const ::mavsdk::rpc::mission_plan::MissionPlanResult& _internal_mission_plan_result() const;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* _internal_mutable_mission_plan_result();
  public:
  void unsafe_arena_set_allocated_mission_plan_result(
      ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result);
  ::mavsdk::rpc::mission_plan::MissionPlanResult* unsafe_arena_release_mission_plan_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.ClearMissionPlanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class SetCurrentMissionItemRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.SetCurrentMissionItemRequest) */ {
 public:
  inline SetCurrentMissionItemRequest() : SetCurrentMissionItemRequest(nullptr) {}
  virtual ~SetCurrentMissionItemRequest();

  SetCurrentMissionItemRequest(const SetCurrentMissionItemRequest& from);
  SetCurrentMissionItemRequest(SetCurrentMissionItemRequest&& from) noexcept
    : SetCurrentMissionItemRequest() {
    *this = ::std::move(from);
  }

  inline SetCurrentMissionItemRequest& operator=(const SetCurrentMissionItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCurrentMissionItemRequest& operator=(SetCurrentMissionItemRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCurrentMissionItemRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCurrentMissionItemRequest* internal_default_instance() {
    return reinterpret_cast<const SetCurrentMissionItemRequest*>(
               &_SetCurrentMissionItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SetCurrentMissionItemRequest& a, SetCurrentMissionItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCurrentMissionItemRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCurrentMissionItemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCurrentMissionItemRequest* New() const final {
    return CreateMaybeMessage<SetCurrentMissionItemRequest>(nullptr);
  }

  SetCurrentMissionItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCurrentMissionItemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCurrentMissionItemRequest& from);
  void MergeFrom(const SetCurrentMissionItemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCurrentMissionItemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.SetCurrentMissionItemRequest";
  }
  protected:
  explicit SetCurrentMissionItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.SetCurrentMissionItemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class SetCurrentMissionItemResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.SetCurrentMissionItemResponse) */ {
 public:
  inline SetCurrentMissionItemResponse() : SetCurrentMissionItemResponse(nullptr) {}
  virtual ~SetCurrentMissionItemResponse();

  SetCurrentMissionItemResponse(const SetCurrentMissionItemResponse& from);
  SetCurrentMissionItemResponse(SetCurrentMissionItemResponse&& from) noexcept
    : SetCurrentMissionItemResponse() {
    *this = ::std::move(from);
  }

  inline SetCurrentMissionItemResponse& operator=(const SetCurrentMissionItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCurrentMissionItemResponse& operator=(SetCurrentMissionItemResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCurrentMissionItemResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCurrentMissionItemResponse* internal_default_instance() {
    return reinterpret_cast<const SetCurrentMissionItemResponse*>(
               &_SetCurrentMissionItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SetCurrentMissionItemResponse& a, SetCurrentMissionItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCurrentMissionItemResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCurrentMissionItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCurrentMissionItemResponse* New() const final {
    return CreateMaybeMessage<SetCurrentMissionItemResponse>(nullptr);
  }

  SetCurrentMissionItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCurrentMissionItemResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCurrentMissionItemResponse& from);
  void MergeFrom(const SetCurrentMissionItemResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCurrentMissionItemResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.SetCurrentMissionItemResponse";
  }
  protected:
  explicit SetCurrentMissionItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionPlanResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission_plan.MissionPlanResult mission_plan_result = 1;
  bool has_mission_plan_result() const;
  private:
  bool _internal_has_mission_plan_result() const;
  public:
  void clear_mission_plan_result();
  const ::mavsdk::rpc::mission_plan::MissionPlanResult& mission_plan_result() const;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* release_mission_plan_result();
  ::mavsdk::rpc::mission_plan::MissionPlanResult* mutable_mission_plan_result();
  void set_allocated_mission_plan_result(::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result);
  private:
  const ::mavsdk::rpc::mission_plan::MissionPlanResult& _internal_mission_plan_result() const;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* _internal_mutable_mission_plan_result();
  public:
  void unsafe_arena_set_allocated_mission_plan_result(
      ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result);
  ::mavsdk::rpc::mission_plan::MissionPlanResult* unsafe_arena_release_mission_plan_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.SetCurrentMissionItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class IsMissionFinishedRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.IsMissionFinishedRequest) */ {
 public:
  inline IsMissionFinishedRequest() : IsMissionFinishedRequest(nullptr) {}
  virtual ~IsMissionFinishedRequest();

  IsMissionFinishedRequest(const IsMissionFinishedRequest& from);
  IsMissionFinishedRequest(IsMissionFinishedRequest&& from) noexcept
    : IsMissionFinishedRequest() {
    *this = ::std::move(from);
  }

  inline IsMissionFinishedRequest& operator=(const IsMissionFinishedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsMissionFinishedRequest& operator=(IsMissionFinishedRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsMissionFinishedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsMissionFinishedRequest* internal_default_instance() {
    return reinterpret_cast<const IsMissionFinishedRequest*>(
               &_IsMissionFinishedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(IsMissionFinishedRequest& a, IsMissionFinishedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsMissionFinishedRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsMissionFinishedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsMissionFinishedRequest* New() const final {
    return CreateMaybeMessage<IsMissionFinishedRequest>(nullptr);
  }

  IsMissionFinishedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsMissionFinishedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsMissionFinishedRequest& from);
  void MergeFrom(const IsMissionFinishedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsMissionFinishedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.IsMissionFinishedRequest";
  }
  protected:
  explicit IsMissionFinishedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.IsMissionFinishedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class IsMissionFinishedResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.IsMissionFinishedResponse) */ {
 public:
  inline IsMissionFinishedResponse() : IsMissionFinishedResponse(nullptr) {}
  virtual ~IsMissionFinishedResponse();

  IsMissionFinishedResponse(const IsMissionFinishedResponse& from);
  IsMissionFinishedResponse(IsMissionFinishedResponse&& from) noexcept
    : IsMissionFinishedResponse() {
    *this = ::std::move(from);
  }

  inline IsMissionFinishedResponse& operator=(const IsMissionFinishedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsMissionFinishedResponse& operator=(IsMissionFinishedResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsMissionFinishedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsMissionFinishedResponse* internal_default_instance() {
    return reinterpret_cast<const IsMissionFinishedResponse*>(
               &_IsMissionFinishedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(IsMissionFinishedResponse& a, IsMissionFinishedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsMissionFinishedResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsMissionFinishedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsMissionFinishedResponse* New() const final {
    return CreateMaybeMessage<IsMissionFinishedResponse>(nullptr);
  }

  IsMissionFinishedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsMissionFinishedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsMissionFinishedResponse& from);
  void MergeFrom(const IsMissionFinishedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsMissionFinishedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.IsMissionFinishedResponse";
  }
  protected:
  explicit IsMissionFinishedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionPlanResultFieldNumber = 1,
    kIsFinishedFieldNumber = 2,
  };
  // .mavsdk.rpc.mission_plan.MissionPlanResult mission_plan_result = 1;
  bool has_mission_plan_result() const;
  private:
  bool _internal_has_mission_plan_result() const;
  public:
  void clear_mission_plan_result();
  const ::mavsdk::rpc::mission_plan::MissionPlanResult& mission_plan_result() const;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* release_mission_plan_result();
  ::mavsdk::rpc::mission_plan::MissionPlanResult* mutable_mission_plan_result();
  void set_allocated_mission_plan_result(::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result);
  private:
  const ::mavsdk::rpc::mission_plan::MissionPlanResult& _internal_mission_plan_result() const;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* _internal_mutable_mission_plan_result();
  public:
  void unsafe_arena_set_allocated_mission_plan_result(
      ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result);
  ::mavsdk::rpc::mission_plan::MissionPlanResult* unsafe_arena_release_mission_plan_result();

  // bool is_finished = 2;
  void clear_is_finished();
  bool is_finished() const;
  void set_is_finished(bool value);
  private:
  bool _internal_is_finished() const;
  void _internal_set_is_finished(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.IsMissionFinishedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result_;
  bool is_finished_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class SubscribeMissionProgressRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.SubscribeMissionProgressRequest) */ {
 public:
  inline SubscribeMissionProgressRequest() : SubscribeMissionProgressRequest(nullptr) {}
  virtual ~SubscribeMissionProgressRequest();

  SubscribeMissionProgressRequest(const SubscribeMissionProgressRequest& from);
  SubscribeMissionProgressRequest(SubscribeMissionProgressRequest&& from) noexcept
    : SubscribeMissionProgressRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeMissionProgressRequest& operator=(const SubscribeMissionProgressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMissionProgressRequest& operator=(SubscribeMissionProgressRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeMissionProgressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeMissionProgressRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeMissionProgressRequest*>(
               &_SubscribeMissionProgressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SubscribeMissionProgressRequest& a, SubscribeMissionProgressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMissionProgressRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeMissionProgressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeMissionProgressRequest* New() const final {
    return CreateMaybeMessage<SubscribeMissionProgressRequest>(nullptr);
  }

  SubscribeMissionProgressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeMissionProgressRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeMissionProgressRequest& from);
  void MergeFrom(const SubscribeMissionProgressRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeMissionProgressRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.SubscribeMissionProgressRequest";
  }
  protected:
  explicit SubscribeMissionProgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.SubscribeMissionProgressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class MissionProgressResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.MissionProgressResponse) */ {
 public:
  inline MissionProgressResponse() : MissionProgressResponse(nullptr) {}
  virtual ~MissionProgressResponse();

  MissionProgressResponse(const MissionProgressResponse& from);
  MissionProgressResponse(MissionProgressResponse&& from) noexcept
    : MissionProgressResponse() {
    *this = ::std::move(from);
  }

  inline MissionProgressResponse& operator=(const MissionProgressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionProgressResponse& operator=(MissionProgressResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissionProgressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionProgressResponse* internal_default_instance() {
    return reinterpret_cast<const MissionProgressResponse*>(
               &_MissionProgressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MissionProgressResponse& a, MissionProgressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionProgressResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionProgressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionProgressResponse* New() const final {
    return CreateMaybeMessage<MissionProgressResponse>(nullptr);
  }

  MissionProgressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionProgressResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissionProgressResponse& from);
  void MergeFrom(const MissionProgressResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionProgressResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.MissionProgressResponse";
  }
  protected:
  explicit MissionProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionProgressFieldNumber = 1,
  };
  // .mavsdk.rpc.mission_plan.MissionProgress mission_progress = 1;
  bool has_mission_progress() const;
  private:
  bool _internal_has_mission_progress() const;
  public:
  void clear_mission_progress();
  const ::mavsdk::rpc::mission_plan::MissionProgress& mission_progress() const;
  ::mavsdk::rpc::mission_plan::MissionProgress* release_mission_progress();
  ::mavsdk::rpc::mission_plan::MissionProgress* mutable_mission_progress();
  void set_allocated_mission_progress(::mavsdk::rpc::mission_plan::MissionProgress* mission_progress);
  private:
  const ::mavsdk::rpc::mission_plan::MissionProgress& _internal_mission_progress() const;
  ::mavsdk::rpc::mission_plan::MissionProgress* _internal_mutable_mission_progress();
  public:
  void unsafe_arena_set_allocated_mission_progress(
      ::mavsdk::rpc::mission_plan::MissionProgress* mission_progress);
  ::mavsdk::rpc::mission_plan::MissionProgress* unsafe_arena_release_mission_progress();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.MissionProgressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_plan::MissionProgress* mission_progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class MissionProgress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.MissionProgress) */ {
 public:
  inline MissionProgress() : MissionProgress(nullptr) {}
  virtual ~MissionProgress();

  MissionProgress(const MissionProgress& from);
  MissionProgress(MissionProgress&& from) noexcept
    : MissionProgress() {
    *this = ::std::move(from);
  }

  inline MissionProgress& operator=(const MissionProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionProgress& operator=(MissionProgress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissionProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionProgress* internal_default_instance() {
    return reinterpret_cast<const MissionProgress*>(
               &_MissionProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MissionProgress& a, MissionProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionProgress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionProgress* New() const final {
    return CreateMaybeMessage<MissionProgress>(nullptr);
  }

  MissionProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissionProgress& from);
  void MergeFrom(const MissionProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.MissionProgress";
  }
  protected:
  explicit MissionProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // int32 current = 1;
  void clear_current();
  ::PROTOBUF_NAMESPACE_ID::int32 current() const;
  void set_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current() const;
  void _internal_set_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total = 2;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.MissionProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// -------------------------------------------------------------------

class MissionPlanResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_plan.MissionPlanResult) */ {
 public:
  inline MissionPlanResult() : MissionPlanResult(nullptr) {}
  virtual ~MissionPlanResult();

  MissionPlanResult(const MissionPlanResult& from);
  MissionPlanResult(MissionPlanResult&& from) noexcept
    : MissionPlanResult() {
    *this = ::std::move(from);
  }

  inline MissionPlanResult& operator=(const MissionPlanResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionPlanResult& operator=(MissionPlanResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissionPlanResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionPlanResult* internal_default_instance() {
    return reinterpret_cast<const MissionPlanResult*>(
               &_MissionPlanResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MissionPlanResult& a, MissionPlanResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionPlanResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionPlanResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionPlanResult* New() const final {
    return CreateMaybeMessage<MissionPlanResult>(nullptr);
  }

  MissionPlanResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionPlanResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissionPlanResult& from);
  void MergeFrom(const MissionPlanResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionPlanResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_plan.MissionPlanResult";
  }
  protected:
  explicit MissionPlanResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto);
    return ::descriptor_table_mission_5fplan_2fmission_5fplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MissionPlanResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    MissionPlanResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    MissionPlanResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_ERROR =
    MissionPlanResult_Result_RESULT_ERROR;
  static constexpr Result RESULT_TOO_MANY_MISSION_ITEMS =
    MissionPlanResult_Result_RESULT_TOO_MANY_MISSION_ITEMS;
  static constexpr Result RESULT_BUSY =
    MissionPlanResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_TIMEOUT =
    MissionPlanResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_INVALID_ARGUMENT =
    MissionPlanResult_Result_RESULT_INVALID_ARGUMENT;
  static constexpr Result RESULT_FAILED_TO_PARSE_PLAN =
    MissionPlanResult_Result_RESULT_FAILED_TO_PARSE_PLAN;
  static constexpr Result RESULT_UNSUPPORTED_MISSION_CMD =
    MissionPlanResult_Result_RESULT_UNSUPPORTED_MISSION_CMD;
  static constexpr Result RESULT_TRANSFER_CANCELLED =
    MissionPlanResult_Result_RESULT_TRANSFER_CANCELLED;
  static inline bool Result_IsValid(int value) {
    return MissionPlanResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    MissionPlanResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    MissionPlanResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    MissionPlanResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return MissionPlanResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return MissionPlanResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return MissionPlanResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  void set_result_str(const std::string& value);
  void set_result_str(std::string&& value);
  void set_result_str(const char* value);
  void set_result_str(const char* value, size_t size);
  std::string* mutable_result_str();
  std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.mission_plan.MissionPlanResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::mission_plan::MissionPlanResult_Result result() const;
  void set_result(::mavsdk::rpc::mission_plan::MissionPlanResult_Result value);
  private:
  ::mavsdk::rpc::mission_plan::MissionPlanResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::mission_plan::MissionPlanResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_plan.MissionPlanResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fplan_2fmission_5fplan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UploadMissionPlanRequest

// string json_plan = 1;
inline void UploadMissionPlanRequest::clear_json_plan() {
  json_plan_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UploadMissionPlanRequest::json_plan() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_plan.UploadMissionPlanRequest.json_plan)
  return _internal_json_plan();
}
inline void UploadMissionPlanRequest::set_json_plan(const std::string& value) {
  _internal_set_json_plan(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_plan.UploadMissionPlanRequest.json_plan)
}
inline std::string* UploadMissionPlanRequest::mutable_json_plan() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_plan.UploadMissionPlanRequest.json_plan)
  return _internal_mutable_json_plan();
}
inline const std::string& UploadMissionPlanRequest::_internal_json_plan() const {
  return json_plan_.Get();
}
inline void UploadMissionPlanRequest::_internal_set_json_plan(const std::string& value) {
  
  json_plan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UploadMissionPlanRequest::set_json_plan(std::string&& value) {
  
  json_plan_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.mission_plan.UploadMissionPlanRequest.json_plan)
}
inline void UploadMissionPlanRequest::set_json_plan(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_plan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.mission_plan.UploadMissionPlanRequest.json_plan)
}
inline void UploadMissionPlanRequest::set_json_plan(const char* value,
    size_t size) {
  
  json_plan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.mission_plan.UploadMissionPlanRequest.json_plan)
}
inline std::string* UploadMissionPlanRequest::_internal_mutable_json_plan() {
  
  return json_plan_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UploadMissionPlanRequest::release_json_plan() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_plan.UploadMissionPlanRequest.json_plan)
  return json_plan_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UploadMissionPlanRequest::set_allocated_json_plan(std::string* json_plan) {
  if (json_plan != nullptr) {
    
  } else {
    
  }
  json_plan_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_plan,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_plan.UploadMissionPlanRequest.json_plan)
}

// -------------------------------------------------------------------

// UploadMissionPlanResponse

// .mavsdk.rpc.mission_plan.MissionPlanResult mission_plan_result = 1;
inline bool UploadMissionPlanResponse::_internal_has_mission_plan_result() const {
  return this != internal_default_instance() && mission_plan_result_ != nullptr;
}
inline bool UploadMissionPlanResponse::has_mission_plan_result() const {
  return _internal_has_mission_plan_result();
}
inline void UploadMissionPlanResponse::clear_mission_plan_result() {
  if (GetArena() == nullptr && mission_plan_result_ != nullptr) {
    delete mission_plan_result_;
  }
  mission_plan_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_plan::MissionPlanResult& UploadMissionPlanResponse::_internal_mission_plan_result() const {
  const ::mavsdk::rpc::mission_plan::MissionPlanResult* p = mission_plan_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission_plan::MissionPlanResult*>(
      &::mavsdk::rpc::mission_plan::_MissionPlanResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_plan::MissionPlanResult& UploadMissionPlanResponse::mission_plan_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_plan.UploadMissionPlanResponse.mission_plan_result)
  return _internal_mission_plan_result();
}
inline void UploadMissionPlanResponse::unsafe_arena_set_allocated_mission_plan_result(
    ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_plan_result_);
  }
  mission_plan_result_ = mission_plan_result;
  if (mission_plan_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_plan.UploadMissionPlanResponse.mission_plan_result)
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* UploadMissionPlanResponse::release_mission_plan_result() {
  
  ::mavsdk::rpc::mission_plan::MissionPlanResult* temp = mission_plan_result_;
  mission_plan_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* UploadMissionPlanResponse::unsafe_arena_release_mission_plan_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_plan.UploadMissionPlanResponse.mission_plan_result)
  
  ::mavsdk::rpc::mission_plan::MissionPlanResult* temp = mission_plan_result_;
  mission_plan_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* UploadMissionPlanResponse::_internal_mutable_mission_plan_result() {
  
  if (mission_plan_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_plan::MissionPlanResult>(GetArena());
    mission_plan_result_ = p;
  }
  return mission_plan_result_;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* UploadMissionPlanResponse::mutable_mission_plan_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_plan.UploadMissionPlanResponse.mission_plan_result)
  return _internal_mutable_mission_plan_result();
}
inline void UploadMissionPlanResponse::set_allocated_mission_plan_result(::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mission_plan_result_;
  }
  if (mission_plan_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mission_plan_result);
    if (message_arena != submessage_arena) {
      mission_plan_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_plan_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_plan_result_ = mission_plan_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_plan.UploadMissionPlanResponse.mission_plan_result)
}

// -------------------------------------------------------------------

// CancelMissionPlanUploadRequest

// -------------------------------------------------------------------

// CancelMissionPlanUploadResponse

// .mavsdk.rpc.mission_plan.MissionPlanResult mission_plan_result = 1;
inline bool CancelMissionPlanUploadResponse::_internal_has_mission_plan_result() const {
  return this != internal_default_instance() && mission_plan_result_ != nullptr;
}
inline bool CancelMissionPlanUploadResponse::has_mission_plan_result() const {
  return _internal_has_mission_plan_result();
}
inline void CancelMissionPlanUploadResponse::clear_mission_plan_result() {
  if (GetArena() == nullptr && mission_plan_result_ != nullptr) {
    delete mission_plan_result_;
  }
  mission_plan_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_plan::MissionPlanResult& CancelMissionPlanUploadResponse::_internal_mission_plan_result() const {
  const ::mavsdk::rpc::mission_plan::MissionPlanResult* p = mission_plan_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission_plan::MissionPlanResult*>(
      &::mavsdk::rpc::mission_plan::_MissionPlanResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_plan::MissionPlanResult& CancelMissionPlanUploadResponse::mission_plan_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_plan.CancelMissionPlanUploadResponse.mission_plan_result)
  return _internal_mission_plan_result();
}
inline void CancelMissionPlanUploadResponse::unsafe_arena_set_allocated_mission_plan_result(
    ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_plan_result_);
  }
  mission_plan_result_ = mission_plan_result;
  if (mission_plan_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_plan.CancelMissionPlanUploadResponse.mission_plan_result)
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* CancelMissionPlanUploadResponse::release_mission_plan_result() {
  
  ::mavsdk::rpc::mission_plan::MissionPlanResult* temp = mission_plan_result_;
  mission_plan_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* CancelMissionPlanUploadResponse::unsafe_arena_release_mission_plan_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_plan.CancelMissionPlanUploadResponse.mission_plan_result)
  
  ::mavsdk::rpc::mission_plan::MissionPlanResult* temp = mission_plan_result_;
  mission_plan_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* CancelMissionPlanUploadResponse::_internal_mutable_mission_plan_result() {
  
  if (mission_plan_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_plan::MissionPlanResult>(GetArena());
    mission_plan_result_ = p;
  }
  return mission_plan_result_;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* CancelMissionPlanUploadResponse::mutable_mission_plan_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_plan.CancelMissionPlanUploadResponse.mission_plan_result)
  return _internal_mutable_mission_plan_result();
}
inline void CancelMissionPlanUploadResponse::set_allocated_mission_plan_result(::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mission_plan_result_;
  }
  if (mission_plan_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mission_plan_result);
    if (message_arena != submessage_arena) {
      mission_plan_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_plan_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_plan_result_ = mission_plan_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_plan.CancelMissionPlanUploadResponse.mission_plan_result)
}

// -------------------------------------------------------------------

// StartMissionRequest

// -------------------------------------------------------------------

// StartMissionResponse

// .mavsdk.rpc.mission_plan.MissionPlanResult mission_plan_result = 1;
inline bool StartMissionResponse::_internal_has_mission_plan_result() const {
  return this != internal_default_instance() && mission_plan_result_ != nullptr;
}
inline bool StartMissionResponse::has_mission_plan_result() const {
  return _internal_has_mission_plan_result();
}
inline void StartMissionResponse::clear_mission_plan_result() {
  if (GetArena() == nullptr && mission_plan_result_ != nullptr) {
    delete mission_plan_result_;
  }
  mission_plan_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_plan::MissionPlanResult& StartMissionResponse::_internal_mission_plan_result() const {
  const ::mavsdk::rpc::mission_plan::MissionPlanResult* p = mission_plan_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission_plan::MissionPlanResult*>(
      &::mavsdk::rpc::mission_plan::_MissionPlanResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_plan::MissionPlanResult& StartMissionResponse::mission_plan_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_plan.StartMissionResponse.mission_plan_result)
  return _internal_mission_plan_result();
}
inline void StartMissionResponse::unsafe_arena_set_allocated_mission_plan_result(
    ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_plan_result_);
  }
  mission_plan_result_ = mission_plan_result;
  if (mission_plan_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_plan.StartMissionResponse.mission_plan_result)
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* StartMissionResponse::release_mission_plan_result() {
  
  ::mavsdk::rpc::mission_plan::MissionPlanResult* temp = mission_plan_result_;
  mission_plan_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* StartMissionResponse::unsafe_arena_release_mission_plan_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_plan.StartMissionResponse.mission_plan_result)
  
  ::mavsdk::rpc::mission_plan::MissionPlanResult* temp = mission_plan_result_;
  mission_plan_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* StartMissionResponse::_internal_mutable_mission_plan_result() {
  
  if (mission_plan_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_plan::MissionPlanResult>(GetArena());
    mission_plan_result_ = p;
  }
  return mission_plan_result_;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* StartMissionResponse::mutable_mission_plan_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_plan.StartMissionResponse.mission_plan_result)
  return _internal_mutable_mission_plan_result();
}
inline void StartMissionResponse::set_allocated_mission_plan_result(::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mission_plan_result_;
  }
  if (mission_plan_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mission_plan_result);
    if (message_arena != submessage_arena) {
      mission_plan_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_plan_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_plan_result_ = mission_plan_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_plan.StartMissionResponse.mission_plan_result)
}

// -------------------------------------------------------------------

// PauseMissionRequest

// -------------------------------------------------------------------

// PauseMissionResponse

// .mavsdk.rpc.mission_plan.MissionPlanResult mission_plan_result = 1;
inline bool PauseMissionResponse::_internal_has_mission_plan_result() const {
  return this != internal_default_instance() && mission_plan_result_ != nullptr;
}
inline bool PauseMissionResponse::has_mission_plan_result() const {
  return _internal_has_mission_plan_result();
}
inline void PauseMissionResponse::clear_mission_plan_result() {
  if (GetArena() == nullptr && mission_plan_result_ != nullptr) {
    delete mission_plan_result_;
  }
  mission_plan_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_plan::MissionPlanResult& PauseMissionResponse::_internal_mission_plan_result() const {
  const ::mavsdk::rpc::mission_plan::MissionPlanResult* p = mission_plan_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission_plan::MissionPlanResult*>(
      &::mavsdk::rpc::mission_plan::_MissionPlanResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_plan::MissionPlanResult& PauseMissionResponse::mission_plan_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_plan.PauseMissionResponse.mission_plan_result)
  return _internal_mission_plan_result();
}
inline void PauseMissionResponse::unsafe_arena_set_allocated_mission_plan_result(
    ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_plan_result_);
  }
  mission_plan_result_ = mission_plan_result;
  if (mission_plan_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_plan.PauseMissionResponse.mission_plan_result)
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* PauseMissionResponse::release_mission_plan_result() {
  
  ::mavsdk::rpc::mission_plan::MissionPlanResult* temp = mission_plan_result_;
  mission_plan_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* PauseMissionResponse::unsafe_arena_release_mission_plan_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_plan.PauseMissionResponse.mission_plan_result)
  
  ::mavsdk::rpc::mission_plan::MissionPlanResult* temp = mission_plan_result_;
  mission_plan_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* PauseMissionResponse::_internal_mutable_mission_plan_result() {
  
  if (mission_plan_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_plan::MissionPlanResult>(GetArena());
    mission_plan_result_ = p;
  }
  return mission_plan_result_;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* PauseMissionResponse::mutable_mission_plan_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_plan.PauseMissionResponse.mission_plan_result)
  return _internal_mutable_mission_plan_result();
}
inline void PauseMissionResponse::set_allocated_mission_plan_result(::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mission_plan_result_;
  }
  if (mission_plan_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mission_plan_result);
    if (message_arena != submessage_arena) {
      mission_plan_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_plan_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_plan_result_ = mission_plan_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_plan.PauseMissionResponse.mission_plan_result)
}

// -------------------------------------------------------------------

// ClearMissionPlanRequest

// -------------------------------------------------------------------

// ClearMissionPlanResponse

// .mavsdk.rpc.mission_plan.MissionPlanResult mission_plan_result = 1;
inline bool ClearMissionPlanResponse::_internal_has_mission_plan_result() const {
  return this != internal_default_instance() && mission_plan_result_ != nullptr;
}
inline bool ClearMissionPlanResponse::has_mission_plan_result() const {
  return _internal_has_mission_plan_result();
}
inline void ClearMissionPlanResponse::clear_mission_plan_result() {
  if (GetArena() == nullptr && mission_plan_result_ != nullptr) {
    delete mission_plan_result_;
  }
  mission_plan_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_plan::MissionPlanResult& ClearMissionPlanResponse::_internal_mission_plan_result() const {
  const ::mavsdk::rpc::mission_plan::MissionPlanResult* p = mission_plan_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission_plan::MissionPlanResult*>(
      &::mavsdk::rpc::mission_plan::_MissionPlanResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_plan::MissionPlanResult& ClearMissionPlanResponse::mission_plan_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_plan.ClearMissionPlanResponse.mission_plan_result)
  return _internal_mission_plan_result();
}
inline void ClearMissionPlanResponse::unsafe_arena_set_allocated_mission_plan_result(
    ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_plan_result_);
  }
  mission_plan_result_ = mission_plan_result;
  if (mission_plan_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_plan.ClearMissionPlanResponse.mission_plan_result)
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* ClearMissionPlanResponse::release_mission_plan_result() {
  
  ::mavsdk::rpc::mission_plan::MissionPlanResult* temp = mission_plan_result_;
  mission_plan_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* ClearMissionPlanResponse::unsafe_arena_release_mission_plan_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_plan.ClearMissionPlanResponse.mission_plan_result)
  
  ::mavsdk::rpc::mission_plan::MissionPlanResult* temp = mission_plan_result_;
  mission_plan_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* ClearMissionPlanResponse::_internal_mutable_mission_plan_result() {
  
  if (mission_plan_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_plan::MissionPlanResult>(GetArena());
    mission_plan_result_ = p;
  }
  return mission_plan_result_;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* ClearMissionPlanResponse::mutable_mission_plan_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_plan.ClearMissionPlanResponse.mission_plan_result)
  return _internal_mutable_mission_plan_result();
}
inline void ClearMissionPlanResponse::set_allocated_mission_plan_result(::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mission_plan_result_;
  }
  if (mission_plan_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mission_plan_result);
    if (message_arena != submessage_arena) {
      mission_plan_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_plan_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_plan_result_ = mission_plan_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_plan.ClearMissionPlanResponse.mission_plan_result)
}

// -------------------------------------------------------------------

// SetCurrentMissionItemRequest

// int32 index = 1;
inline void SetCurrentMissionItemRequest::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetCurrentMissionItemRequest::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetCurrentMissionItemRequest::index() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_plan.SetCurrentMissionItemRequest.index)
  return _internal_index();
}
inline void SetCurrentMissionItemRequest::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void SetCurrentMissionItemRequest::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_plan.SetCurrentMissionItemRequest.index)
}

// -------------------------------------------------------------------

// SetCurrentMissionItemResponse

// .mavsdk.rpc.mission_plan.MissionPlanResult mission_plan_result = 1;
inline bool SetCurrentMissionItemResponse::_internal_has_mission_plan_result() const {
  return this != internal_default_instance() && mission_plan_result_ != nullptr;
}
inline bool SetCurrentMissionItemResponse::has_mission_plan_result() const {
  return _internal_has_mission_plan_result();
}
inline void SetCurrentMissionItemResponse::clear_mission_plan_result() {
  if (GetArena() == nullptr && mission_plan_result_ != nullptr) {
    delete mission_plan_result_;
  }
  mission_plan_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_plan::MissionPlanResult& SetCurrentMissionItemResponse::_internal_mission_plan_result() const {
  const ::mavsdk::rpc::mission_plan::MissionPlanResult* p = mission_plan_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission_plan::MissionPlanResult*>(
      &::mavsdk::rpc::mission_plan::_MissionPlanResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_plan::MissionPlanResult& SetCurrentMissionItemResponse::mission_plan_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_plan.SetCurrentMissionItemResponse.mission_plan_result)
  return _internal_mission_plan_result();
}
inline void SetCurrentMissionItemResponse::unsafe_arena_set_allocated_mission_plan_result(
    ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_plan_result_);
  }
  mission_plan_result_ = mission_plan_result;
  if (mission_plan_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_plan.SetCurrentMissionItemResponse.mission_plan_result)
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* SetCurrentMissionItemResponse::release_mission_plan_result() {
  
  ::mavsdk::rpc::mission_plan::MissionPlanResult* temp = mission_plan_result_;
  mission_plan_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* SetCurrentMissionItemResponse::unsafe_arena_release_mission_plan_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_plan.SetCurrentMissionItemResponse.mission_plan_result)
  
  ::mavsdk::rpc::mission_plan::MissionPlanResult* temp = mission_plan_result_;
  mission_plan_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* SetCurrentMissionItemResponse::_internal_mutable_mission_plan_result() {
  
  if (mission_plan_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_plan::MissionPlanResult>(GetArena());
    mission_plan_result_ = p;
  }
  return mission_plan_result_;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* SetCurrentMissionItemResponse::mutable_mission_plan_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_plan.SetCurrentMissionItemResponse.mission_plan_result)
  return _internal_mutable_mission_plan_result();
}
inline void SetCurrentMissionItemResponse::set_allocated_mission_plan_result(::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mission_plan_result_;
  }
  if (mission_plan_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mission_plan_result);
    if (message_arena != submessage_arena) {
      mission_plan_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_plan_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_plan_result_ = mission_plan_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_plan.SetCurrentMissionItemResponse.mission_plan_result)
}

// -------------------------------------------------------------------

// IsMissionFinishedRequest

// -------------------------------------------------------------------

// IsMissionFinishedResponse

// .mavsdk.rpc.mission_plan.MissionPlanResult mission_plan_result = 1;
inline bool IsMissionFinishedResponse::_internal_has_mission_plan_result() const {
  return this != internal_default_instance() && mission_plan_result_ != nullptr;
}
inline bool IsMissionFinishedResponse::has_mission_plan_result() const {
  return _internal_has_mission_plan_result();
}
inline void IsMissionFinishedResponse::clear_mission_plan_result() {
  if (GetArena() == nullptr && mission_plan_result_ != nullptr) {
    delete mission_plan_result_;
  }
  mission_plan_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_plan::MissionPlanResult& IsMissionFinishedResponse::_internal_mission_plan_result() const {
  const ::mavsdk::rpc::mission_plan::MissionPlanResult* p = mission_plan_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission_plan::MissionPlanResult*>(
      &::mavsdk::rpc::mission_plan::_MissionPlanResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_plan::MissionPlanResult& IsMissionFinishedResponse::mission_plan_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_plan.IsMissionFinishedResponse.mission_plan_result)
  return _internal_mission_plan_result();
}
inline void IsMissionFinishedResponse::unsafe_arena_set_allocated_mission_plan_result(
    ::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_plan_result_);
  }
  mission_plan_result_ = mission_plan_result;
  if (mission_plan_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_plan.IsMissionFinishedResponse.mission_plan_result)
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* IsMissionFinishedResponse::release_mission_plan_result() {
  
  ::mavsdk::rpc::mission_plan::MissionPlanResult* temp = mission_plan_result_;
  mission_plan_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* IsMissionFinishedResponse::unsafe_arena_release_mission_plan_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_plan.IsMissionFinishedResponse.mission_plan_result)
  
  ::mavsdk::rpc::mission_plan::MissionPlanResult* temp = mission_plan_result_;
  mission_plan_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* IsMissionFinishedResponse::_internal_mutable_mission_plan_result() {
  
  if (mission_plan_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_plan::MissionPlanResult>(GetArena());
    mission_plan_result_ = p;
  }
  return mission_plan_result_;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult* IsMissionFinishedResponse::mutable_mission_plan_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_plan.IsMissionFinishedResponse.mission_plan_result)
  return _internal_mutable_mission_plan_result();
}
inline void IsMissionFinishedResponse::set_allocated_mission_plan_result(::mavsdk::rpc::mission_plan::MissionPlanResult* mission_plan_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mission_plan_result_;
  }
  if (mission_plan_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mission_plan_result);
    if (message_arena != submessage_arena) {
      mission_plan_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_plan_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_plan_result_ = mission_plan_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_plan.IsMissionFinishedResponse.mission_plan_result)
}

// bool is_finished = 2;
inline void IsMissionFinishedResponse::clear_is_finished() {
  is_finished_ = false;
}
inline bool IsMissionFinishedResponse::_internal_is_finished() const {
  return is_finished_;
}
inline bool IsMissionFinishedResponse::is_finished() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_plan.IsMissionFinishedResponse.is_finished)
  return _internal_is_finished();
}
inline void IsMissionFinishedResponse::_internal_set_is_finished(bool value) {
  
  is_finished_ = value;
}
inline void IsMissionFinishedResponse::set_is_finished(bool value) {
  _internal_set_is_finished(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_plan.IsMissionFinishedResponse.is_finished)
}

// -------------------------------------------------------------------

// SubscribeMissionProgressRequest

// -------------------------------------------------------------------

// MissionProgressResponse

// .mavsdk.rpc.mission_plan.MissionProgress mission_progress = 1;
inline bool MissionProgressResponse::_internal_has_mission_progress() const {
  return this != internal_default_instance() && mission_progress_ != nullptr;
}
inline bool MissionProgressResponse::has_mission_progress() const {
  return _internal_has_mission_progress();
}
inline void MissionProgressResponse::clear_mission_progress() {
  if (GetArena() == nullptr && mission_progress_ != nullptr) {
    delete mission_progress_;
  }
  mission_progress_ = nullptr;
}
inline const ::mavsdk::rpc::mission_plan::MissionProgress& MissionProgressResponse::_internal_mission_progress() const {
  const ::mavsdk::rpc::mission_plan::MissionProgress* p = mission_progress_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission_plan::MissionProgress*>(
      &::mavsdk::rpc::mission_plan::_MissionProgress_default_instance_);
}
inline const ::mavsdk::rpc::mission_plan::MissionProgress& MissionProgressResponse::mission_progress() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_plan.MissionProgressResponse.mission_progress)
  return _internal_mission_progress();
}
inline void MissionProgressResponse::unsafe_arena_set_allocated_mission_progress(
    ::mavsdk::rpc::mission_plan::MissionProgress* mission_progress) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_progress_);
  }
  mission_progress_ = mission_progress;
  if (mission_progress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_plan.MissionProgressResponse.mission_progress)
}
inline ::mavsdk::rpc::mission_plan::MissionProgress* MissionProgressResponse::release_mission_progress() {
  
  ::mavsdk::rpc::mission_plan::MissionProgress* temp = mission_progress_;
  mission_progress_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::mission_plan::MissionProgress* MissionProgressResponse::unsafe_arena_release_mission_progress() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_plan.MissionProgressResponse.mission_progress)
  
  ::mavsdk::rpc::mission_plan::MissionProgress* temp = mission_progress_;
  mission_progress_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_plan::MissionProgress* MissionProgressResponse::_internal_mutable_mission_progress() {
  
  if (mission_progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_plan::MissionProgress>(GetArena());
    mission_progress_ = p;
  }
  return mission_progress_;
}
inline ::mavsdk::rpc::mission_plan::MissionProgress* MissionProgressResponse::mutable_mission_progress() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_plan.MissionProgressResponse.mission_progress)
  return _internal_mutable_mission_progress();
}
inline void MissionProgressResponse::set_allocated_mission_progress(::mavsdk::rpc::mission_plan::MissionProgress* mission_progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mission_progress_;
  }
  if (mission_progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mission_progress);
    if (message_arena != submessage_arena) {
      mission_progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_progress, submessage_arena);
    }
    
  } else {
    
  }
  mission_progress_ = mission_progress;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_plan.MissionProgressResponse.mission_progress)
}

// -------------------------------------------------------------------

// MissionProgress

// int32 current = 1;
inline void MissionProgress::clear_current() {
  current_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionProgress::_internal_current() const {
  return current_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionProgress::current() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_plan.MissionProgress.current)
  return _internal_current();
}
inline void MissionProgress::_internal_set_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_ = value;
}
inline void MissionProgress::set_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_plan.MissionProgress.current)
}

// int32 total = 2;
inline void MissionProgress::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionProgress::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionProgress::total() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_plan.MissionProgress.total)
  return _internal_total();
}
inline void MissionProgress::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void MissionProgress::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_plan.MissionProgress.total)
}

// -------------------------------------------------------------------

// MissionPlanResult

// .mavsdk.rpc.mission_plan.MissionPlanResult.Result result = 1;
inline void MissionPlanResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult_Result MissionPlanResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::mission_plan::MissionPlanResult_Result >(result_);
}
inline ::mavsdk::rpc::mission_plan::MissionPlanResult_Result MissionPlanResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_plan.MissionPlanResult.result)
  return _internal_result();
}
inline void MissionPlanResult::_internal_set_result(::mavsdk::rpc::mission_plan::MissionPlanResult_Result value) {
  
  result_ = value;
}
inline void MissionPlanResult::set_result(::mavsdk::rpc::mission_plan::MissionPlanResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_plan.MissionPlanResult.result)
}

// string result_str = 2;
inline void MissionPlanResult::clear_result_str() {
  result_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MissionPlanResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_plan.MissionPlanResult.result_str)
  return _internal_result_str();
}
inline void MissionPlanResult::set_result_str(const std::string& value) {
  _internal_set_result_str(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_plan.MissionPlanResult.result_str)
}
inline std::string* MissionPlanResult::mutable_result_str() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_plan.MissionPlanResult.result_str)
  return _internal_mutable_result_str();
}
inline const std::string& MissionPlanResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void MissionPlanResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MissionPlanResult::set_result_str(std::string&& value) {
  
  result_str_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.mission_plan.MissionPlanResult.result_str)
}
inline void MissionPlanResult::set_result_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.mission_plan.MissionPlanResult.result_str)
}
inline void MissionPlanResult::set_result_str(const char* value,
    size_t size) {
  
  result_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.mission_plan.MissionPlanResult.result_str)
}
inline std::string* MissionPlanResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MissionPlanResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_plan.MissionPlanResult.result_str)
  return result_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MissionPlanResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_plan.MissionPlanResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mission_plan
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::mission_plan::MissionPlanResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::mission_plan::MissionPlanResult_Result>() {
  return ::mavsdk::rpc::mission_plan::MissionPlanResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mission_5fplan_2fmission_5fplan_2eproto
