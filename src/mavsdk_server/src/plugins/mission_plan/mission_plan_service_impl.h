// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/mission_plan/mission_plan.proto)

#include "mission_plan/mission_plan.grpc.pb.h"
#include "plugins/mission_plan/mission_plan.h"

#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <sstream>
#include <vector>

namespace mavsdk {
namespace mavsdk_server {

template<typename MissionPlan = MissionPlan>
class MissionPlanServiceImpl final : public rpc::mission_plan::MissionPlanService::Service {
public:
    MissionPlanServiceImpl(MissionPlan& mission_plan) : _mission_plan(mission_plan) {}

    template<typename ResponseType>
    void fillResponseWithResult(ResponseType* response, mavsdk::MissionPlan::Result& result) const
    {
        auto rpc_result = translateToRpcResult(result);

        auto* rpc_mission_plan_result = new rpc::mission_plan::MissionPlanResult();
        rpc_mission_plan_result->set_result(rpc_result);
        std::stringstream ss;
        ss << result;
        rpc_mission_plan_result->set_result_str(ss.str());

        response->set_allocated_mission_plan_result(rpc_mission_plan_result);
    }

    static std::unique_ptr<rpc::mission_plan::MissionProgress>
    translateToRpcMissionProgress(const mavsdk::MissionPlan::MissionProgress& mission_progress)
    {
        auto rpc_obj = std::make_unique<rpc::mission_plan::MissionProgress>();

        rpc_obj->set_current(mission_progress.current);

        rpc_obj->set_total(mission_progress.total);

        return rpc_obj;
    }

    static mavsdk::MissionPlan::MissionProgress
    translateFromRpcMissionProgress(const rpc::mission_plan::MissionProgress& mission_progress)
    {
        mavsdk::MissionPlan::MissionProgress obj;

        obj.current = mission_progress.current();

        obj.total = mission_progress.total();

        return obj;
    }

    static rpc::mission_plan::MissionPlanResult::Result
    translateToRpcResult(const mavsdk::MissionPlan::Result& result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case mavsdk::MissionPlan::Result::Unknown:
                return rpc::mission_plan::MissionPlanResult_Result_RESULT_UNKNOWN;
            case mavsdk::MissionPlan::Result::Success:
                return rpc::mission_plan::MissionPlanResult_Result_RESULT_SUCCESS;
            case mavsdk::MissionPlan::Result::Error:
                return rpc::mission_plan::MissionPlanResult_Result_RESULT_ERROR;
            case mavsdk::MissionPlan::Result::TooManyMissionItems:
                return rpc::mission_plan::MissionPlanResult_Result_RESULT_TOO_MANY_MISSION_ITEMS;
            case mavsdk::MissionPlan::Result::Busy:
                return rpc::mission_plan::MissionPlanResult_Result_RESULT_BUSY;
            case mavsdk::MissionPlan::Result::Timeout:
                return rpc::mission_plan::MissionPlanResult_Result_RESULT_TIMEOUT;
            case mavsdk::MissionPlan::Result::InvalidArgument:
                return rpc::mission_plan::MissionPlanResult_Result_RESULT_INVALID_ARGUMENT;
            case mavsdk::MissionPlan::Result::FailedToParsePlan:
                return rpc::mission_plan::MissionPlanResult_Result_RESULT_FAILED_TO_PARSE_PLAN;
            case mavsdk::MissionPlan::Result::UnsupportedMissionCmd:
                return rpc::mission_plan::MissionPlanResult_Result_RESULT_UNSUPPORTED_MISSION_CMD;
            case mavsdk::MissionPlan::Result::TransferCancelled:
                return rpc::mission_plan::MissionPlanResult_Result_RESULT_TRANSFER_CANCELLED;
        }
    }

    static mavsdk::MissionPlan::Result
    translateFromRpcResult(const rpc::mission_plan::MissionPlanResult::Result result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case rpc::mission_plan::MissionPlanResult_Result_RESULT_UNKNOWN:
                return mavsdk::MissionPlan::Result::Unknown;
            case rpc::mission_plan::MissionPlanResult_Result_RESULT_SUCCESS:
                return mavsdk::MissionPlan::Result::Success;
            case rpc::mission_plan::MissionPlanResult_Result_RESULT_ERROR:
                return mavsdk::MissionPlan::Result::Error;
            case rpc::mission_plan::MissionPlanResult_Result_RESULT_TOO_MANY_MISSION_ITEMS:
                return mavsdk::MissionPlan::Result::TooManyMissionItems;
            case rpc::mission_plan::MissionPlanResult_Result_RESULT_BUSY:
                return mavsdk::MissionPlan::Result::Busy;
            case rpc::mission_plan::MissionPlanResult_Result_RESULT_TIMEOUT:
                return mavsdk::MissionPlan::Result::Timeout;
            case rpc::mission_plan::MissionPlanResult_Result_RESULT_INVALID_ARGUMENT:
                return mavsdk::MissionPlan::Result::InvalidArgument;
            case rpc::mission_plan::MissionPlanResult_Result_RESULT_FAILED_TO_PARSE_PLAN:
                return mavsdk::MissionPlan::Result::FailedToParsePlan;
            case rpc::mission_plan::MissionPlanResult_Result_RESULT_UNSUPPORTED_MISSION_CMD:
                return mavsdk::MissionPlan::Result::UnsupportedMissionCmd;
            case rpc::mission_plan::MissionPlanResult_Result_RESULT_TRANSFER_CANCELLED:
                return mavsdk::MissionPlan::Result::TransferCancelled;
        }
    }

    grpc::Status UploadMissionPlan(
        grpc::ServerContext* /* context */,
        const rpc::mission_plan::UploadMissionPlanRequest* request,
        rpc::mission_plan::UploadMissionPlanResponse* response) override
    {
        if (request == nullptr) {
            LogWarn() << "UploadMissionPlan sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _mission_plan.upload_mission_plan(request->json_plan());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status CancelMissionPlanUpload(
        grpc::ServerContext* /* context */,
        const rpc::mission_plan::CancelMissionPlanUploadRequest* /* request */,
        rpc::mission_plan::CancelMissionPlanUploadResponse* response) override
    {
        auto result = _mission_plan.cancel_mission_plan_upload();

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status ClearMissionPlan(
        grpc::ServerContext* /* context */,
        const rpc::mission_plan::ClearMissionPlanRequest* /* request */,
        rpc::mission_plan::ClearMissionPlanResponse* response) override
    {
        auto result = _mission_plan.clear_mission_plan();

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status StartMission(
        grpc::ServerContext* /* context */,
        const rpc::mission_plan::StartMissionRequest* /* request */,
        rpc::mission_plan::StartMissionResponse* response) override
    {
        auto result = _mission_plan.start_mission();

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status PauseMission(
        grpc::ServerContext* /* context */,
        const rpc::mission_plan::PauseMissionRequest* /* request */,
        rpc::mission_plan::PauseMissionResponse* response) override
    {
        auto result = _mission_plan.pause_mission();

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SetCurrentMissionItem(
        grpc::ServerContext* /* context */,
        const rpc::mission_plan::SetCurrentMissionItemRequest* request,
        rpc::mission_plan::SetCurrentMissionItemResponse* response) override
    {
        if (request == nullptr) {
            LogWarn() << "SetCurrentMissionItem sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _mission_plan.set_current_mission_item(request->index());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status IsMissionFinished(
        grpc::ServerContext* /* context */,
        const rpc::mission_plan::IsMissionFinishedRequest* /* request */,
        rpc::mission_plan::IsMissionFinishedResponse* response) override
    {
        auto result = _mission_plan.is_mission_finished();

        if (response != nullptr) {
            fillResponseWithResult(response, result.first);

            response->set_is_finished(result.second);
        }

        return grpc::Status::OK;
    }

    grpc::Status SubscribeMissionProgress(
        grpc::ServerContext* /* context */,
        const mavsdk::rpc::mission_plan::SubscribeMissionProgressRequest* /* request */,
        grpc::ServerWriter<rpc::mission_plan::MissionProgressResponse>* writer) override
    {
        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        auto is_finished = std::make_shared<bool>(false);

        std::mutex subscribe_mutex{};

        _mission_plan.subscribe_mission_progress(
            [this, &writer, &stream_closed_promise, is_finished, &subscribe_mutex](
                const mavsdk::MissionPlan::MissionProgress mission_progress) {
                rpc::mission_plan::MissionProgressResponse rpc_response;

                rpc_response.set_allocated_mission_progress(
                    translateToRpcMissionProgress(mission_progress).release());

                std::unique_lock<std::mutex> lock(subscribe_mutex);
                if (!*is_finished && !writer->Write(rpc_response)) {
                    _mission_plan.subscribe_mission_progress(nullptr);

                    *is_finished = true;
                    unregister_stream_stop_promise(stream_closed_promise);
                    lock.unlock();
                    stream_closed_promise->set_value();
                }
            });

        stream_closed_future.wait();
        return grpc::Status::OK;
    }

    void stop()
    {
        _stopped.store(true);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom)
    {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom)
    {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end();
             /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }

    MissionPlan& _mission_plan;
    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises{};
};

} // namespace mavsdk_server
} // namespace mavsdk