{% for nested_enum in nested_enums %}
{{ nested_enums[nested_enum] }}
{% endfor %}

{% if not name.upper_camel_case.endswith('Result') -%}
static std::unique_ptr<rpc::{{ plugin_name.lower_snake_case }}::{{ name.upper_camel_case }}> translate{{ name.upper_camel_case }}(const {{ package.lower_snake_case.split('.')[0] }}::{{ plugin_name.upper_camel_case }}::{{ name.upper_camel_case }} &{{ name.lower_snake_case }})
{
    auto rpc_{{ name.lower_snake_case }} = std::unique_ptr<rpc::{{ plugin_name.lower_snake_case }}::{{ name.upper_camel_case }}>(new rpc::{{ plugin_name.lower_snake_case }}::{{ name.upper_camel_case }}());

{% for field in fields %}
    rpc_{{ name.lower_snake_case }}->set_{{ field.name.lower_snake_case }}({{ name.lower_snake_case }}.{{ field.name.lower_snake_case }});
{%- endfor %}

    return rpc_{{ name.lower_snake_case }};
}
{% endif %}
