#pragma once

#include <vector>
${INCLUDES_STRING}

namespace dronecore {

class DeviceImpl;
class PluginImplBase;
${FORWARD_DECLARATION_STRING}

/**
 * The DevicePluginContainer contains all plugins for a device.
 *
 * The content of the DevicePluginContainer is auto-generated at compile time.
 * Plugins such as Action or Telemetry are included so that they can be accessed
 * using `DroneCore::device().action()...`
 */
class DevicePluginContainer
{
public:
    /**
     * Constructor of DevicePluginContainer called internally.
     *
     * A device inheriting from DevicePluginContainer is created internally and can be accessed
     * using `DroneCore::device()`.
     */
    explicit DevicePluginContainer(DeviceImpl *impl);

    /**
     * Destructor of DevicePluginContainer called internally.
     *
     * The destructor of a DevicePluginContainer does not need to be called by any consumer of the
     * API. Instead the device will be cleaned up when DroneCore is destroyed.
     */
    virtual ~DevicePluginContainer();

${PLUGIN_GET_STRING}

    // Non-copyable
    DevicePluginContainer(const DevicePluginContainer &) = delete;
    const DevicePluginContainer &operator=(const DevicePluginContainer &) = delete;

protected:
    virtual void init_plugins();
    virtual void deinit_plugins();

    DeviceImpl *_impl;

${PLUGIN_MEMBER_STRING}

    std::vector<PluginImplBase *> _plugin_impl_list;
};

} // namespace dronecore
